
ADC_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000260  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000002b4  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000e8  00000000  00000000  00000320  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000bff  00000000  00000000  00000408  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007c4  00000000  00000000  00001007  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000082a  00000000  00000000  000017cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000017c  00000000  00000000  00001ff8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004cc  00000000  00000000  00002174  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000056d  00000000  00000000  00002640  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002bad  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <main>
  64:	0c 94 2e 01 	jmp	0x25c	; 0x25c <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <ADC_init>:
#include "ADC_Interface.h"

void ADC_init(void)
{
	// Select Vref = AVCC
	SET_BIT(ADMUX,6);
  6c:	87 b1       	in	r24, 0x07	; 7
  6e:	80 64       	ori	r24, 0x40	; 64
  70:	87 b9       	out	0x07, r24	; 7
	CLR_BIT(ADMUX,7);
  72:	87 b1       	in	r24, 0x07	; 7
  74:	8f 77       	andi	r24, 0x7F	; 127
  76:	87 b9       	out	0x07, r24	; 7
	
	// Choose Right Adjustment
	CLR_BIT(ADMUX,5);
  78:	87 b1       	in	r24, 0x07	; 7
  7a:	8f 7d       	andi	r24, 0xDF	; 223
  7c:	87 b9       	out	0x07, r24	; 7
	
	// Disable Auto Trigger ( Single Conversion Mode )
	CLR_BIT(ADCSRA,5);
  7e:	86 b1       	in	r24, 0x06	; 6
  80:	8f 7d       	andi	r24, 0xDF	; 223
  82:	86 b9       	out	0x06, r24	; 6
	
	// Disable Interrupt 
	CLR_BIT(ADCSRA,3);
  84:	86 b1       	in	r24, 0x06	; 6
  86:	87 7f       	andi	r24, 0xF7	; 247
  88:	86 b9       	out	0x06, r24	; 6
	
	// Prescaler 128 for 16MHZ 
	SET_BIT(ADCSRA,0);
  8a:	86 b1       	in	r24, 0x06	; 6
  8c:	81 60       	ori	r24, 0x01	; 1
  8e:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,1);
  90:	86 b1       	in	r24, 0x06	; 6
  92:	82 60       	ori	r24, 0x02	; 2
  94:	86 b9       	out	0x06, r24	; 6
	SET_BIT(ADCSRA,2);
  96:	86 b1       	in	r24, 0x06	; 6
  98:	84 60       	ori	r24, 0x04	; 4
  9a:	86 b9       	out	0x06, r24	; 6
	
	// ADC Enable
	SET_BIT(ADCSRA,7);
  9c:	86 b1       	in	r24, 0x06	; 6
  9e:	80 68       	ori	r24, 0x80	; 128
  a0:	86 b9       	out	0x06, r24	; 6
  a2:	08 95       	ret

000000a4 <ADC_getDigitalValue>:
	
}

void ADC_getDigitalValue(u8 channelNum, u16* digitalValue)
{
	if ( (channelNum<32) && (digitalValue !=  NULL) )
  a4:	80 32       	cpi	r24, 0x20	; 32
  a6:	b0 f4       	brcc	.+44     	; 0xd4 <ADC_getDigitalValue+0x30>
  a8:	61 15       	cp	r22, r1
  aa:	71 05       	cpc	r23, r1
  ac:	99 f0       	breq	.+38     	; 0xd4 <ADC_getDigitalValue+0x30>
	{
		// Clear ADMUX Channel Bits
		ADMUX &= 0b11100000 ; 
  ae:	97 b1       	in	r25, 0x07	; 7
  b0:	90 7e       	andi	r25, 0xE0	; 224
  b2:	97 b9       	out	0x07, r25	; 7
		
		// Select Channel Number 
		ADMUX |= channelNum ;
  b4:	97 b1       	in	r25, 0x07	; 7
  b6:	89 2b       	or	r24, r25
  b8:	87 b9       	out	0x07, r24	; 7
		
		// Start Conversion 
		SET_BIT(ADCSRA,6);
  ba:	86 b1       	in	r24, 0x06	; 6
  bc:	80 64       	ori	r24, 0x40	; 64
  be:	86 b9       	out	0x06, r24	; 6
		
		// Waiting For Flag Of ADC
		while (0 == GET_BIT(ADCSRA,4)) ;
  c0:	34 9b       	sbis	0x06, 4	; 6
  c2:	fe cf       	rjmp	.-4      	; 0xc0 <ADC_getDigitalValue+0x1c>
		
		// Clear Flag
		SET_BIT(ADCSRA,4);
  c4:	86 b1       	in	r24, 0x06	; 6
  c6:	80 61       	ori	r24, 0x10	; 16
  c8:	86 b9       	out	0x06, r24	; 6
		
		*digitalValue = ADC_u16 ; 
  ca:	84 b1       	in	r24, 0x04	; 4
  cc:	95 b1       	in	r25, 0x05	; 5
  ce:	fb 01       	movw	r30, r22
  d0:	91 83       	std	Z+1, r25	; 0x01
  d2:	80 83       	st	Z, r24
  d4:	08 95       	ret

000000d6 <DIO_setPinDirection>:
/* PINS APIS*/ 

void DIO_setPinDirection(u8 PortId, u8 PinId , u8 PinDirection ) 

{
 if ( (PortId<=3) && (PinId<=7) && ((PinDirection == DIO_PIN_OUTPUT ) || (PinDirection == DIO_PIN_INPUT)) )
  d6:	84 30       	cpi	r24, 0x04	; 4
  d8:	08 f0       	brcs	.+2      	; 0xdc <DIO_setPinDirection+0x6>
  da:	72 c0       	rjmp	.+228    	; 0x1c0 <DIO_setPinDirection+0xea>
  dc:	68 30       	cpi	r22, 0x08	; 8
  de:	08 f0       	brcs	.+2      	; 0xe2 <DIO_setPinDirection+0xc>
  e0:	6f c0       	rjmp	.+222    	; 0x1c0 <DIO_setPinDirection+0xea>
  e2:	42 30       	cpi	r20, 0x02	; 2
  e4:	08 f0       	brcs	.+2      	; 0xe8 <DIO_setPinDirection+0x12>
  e6:	6c c0       	rjmp	.+216    	; 0x1c0 <DIO_setPinDirection+0xea>
 { 
	switch (PortId)  // DIO PORTA
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	01 f1       	breq	.+64     	; 0x12c <DIO_setPinDirection+0x56>
  ec:	30 f0       	brcs	.+12     	; 0xfa <DIO_setPinDirection+0x24>
  ee:	82 30       	cpi	r24, 0x02	; 2
  f0:	b1 f1       	breq	.+108    	; 0x15e <DIO_setPinDirection+0x88>
  f2:	83 30       	cpi	r24, 0x03	; 3
  f4:	09 f4       	brne	.+2      	; 0xf8 <DIO_setPinDirection+0x22>
  f6:	4c c0       	rjmp	.+152    	; 0x190 <DIO_setPinDirection+0xba>
  f8:	08 95       	ret
	{
		case 0 : 
		if (DIO_PIN_OUTPUT == PinDirection)
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	59 f4       	brne	.+22     	; 0x114 <DIO_setPinDirection+0x3e>
		{
			SET_BIT(DDRA,PinId);
  fe:	2a b3       	in	r18, 0x1a	; 26
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	02 c0       	rjmp	.+4      	; 0x10a <DIO_setPinDirection+0x34>
 106:	88 0f       	add	r24, r24
 108:	99 1f       	adc	r25, r25
 10a:	6a 95       	dec	r22
 10c:	e2 f7       	brpl	.-8      	; 0x106 <DIO_setPinDirection+0x30>
 10e:	82 2b       	or	r24, r18
 110:	8a bb       	out	0x1a, r24	; 26
 112:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRA,PinId);
 114:	2a b3       	in	r18, 0x1a	; 26
 116:	81 e0       	ldi	r24, 0x01	; 1
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	02 c0       	rjmp	.+4      	; 0x120 <DIO_setPinDirection+0x4a>
 11c:	88 0f       	add	r24, r24
 11e:	99 1f       	adc	r25, r25
 120:	6a 95       	dec	r22
 122:	e2 f7       	brpl	.-8      	; 0x11c <DIO_setPinDirection+0x46>
 124:	80 95       	com	r24
 126:	82 23       	and	r24, r18
 128:	8a bb       	out	0x1a, r24	; 26
 12a:	08 95       	ret
		}
		break ;
		
		case 1 : // DIO PORTB 
		if (DIO_PIN_OUTPUT == PinDirection)
 12c:	41 30       	cpi	r20, 0x01	; 1
 12e:	59 f4       	brne	.+22     	; 0x146 <DIO_setPinDirection+0x70>
		{
			SET_BIT(DDRB,PinId);
 130:	27 b3       	in	r18, 0x17	; 23
 132:	81 e0       	ldi	r24, 0x01	; 1
 134:	90 e0       	ldi	r25, 0x00	; 0
 136:	02 c0       	rjmp	.+4      	; 0x13c <DIO_setPinDirection+0x66>
 138:	88 0f       	add	r24, r24
 13a:	99 1f       	adc	r25, r25
 13c:	6a 95       	dec	r22
 13e:	e2 f7       	brpl	.-8      	; 0x138 <DIO_setPinDirection+0x62>
 140:	82 2b       	or	r24, r18
 142:	87 bb       	out	0x17, r24	; 23
 144:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRB,PinId);
 146:	27 b3       	in	r18, 0x17	; 23
 148:	81 e0       	ldi	r24, 0x01	; 1
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	02 c0       	rjmp	.+4      	; 0x152 <DIO_setPinDirection+0x7c>
 14e:	88 0f       	add	r24, r24
 150:	99 1f       	adc	r25, r25
 152:	6a 95       	dec	r22
 154:	e2 f7       	brpl	.-8      	; 0x14e <DIO_setPinDirection+0x78>
 156:	80 95       	com	r24
 158:	82 23       	and	r24, r18
 15a:	87 bb       	out	0x17, r24	; 23
 15c:	08 95       	ret
		}
		break ;
		
		case 2 : // DIO PORTC 
		if (DIO_PIN_OUTPUT == PinDirection)
 15e:	41 30       	cpi	r20, 0x01	; 1
 160:	59 f4       	brne	.+22     	; 0x178 <DIO_setPinDirection+0xa2>
		{
			SET_BIT(DDRC,PinId);
 162:	24 b3       	in	r18, 0x14	; 20
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	02 c0       	rjmp	.+4      	; 0x16e <DIO_setPinDirection+0x98>
 16a:	88 0f       	add	r24, r24
 16c:	99 1f       	adc	r25, r25
 16e:	6a 95       	dec	r22
 170:	e2 f7       	brpl	.-8      	; 0x16a <DIO_setPinDirection+0x94>
 172:	82 2b       	or	r24, r18
 174:	84 bb       	out	0x14, r24	; 20
 176:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRC,PinId);
 178:	24 b3       	in	r18, 0x14	; 20
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_setPinDirection+0xae>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_setPinDirection+0xaa>
 188:	80 95       	com	r24
 18a:	82 23       	and	r24, r18
 18c:	84 bb       	out	0x14, r24	; 20
 18e:	08 95       	ret
		}
		break ;
		
		case 3 : // DIO PORTD 
		if (DIO_PIN_OUTPUT == PinDirection)
 190:	41 30       	cpi	r20, 0x01	; 1
 192:	59 f4       	brne	.+22     	; 0x1aa <DIO_setPinDirection+0xd4>
		{
			SET_BIT(DDRD,PinId);
 194:	21 b3       	in	r18, 0x11	; 17
 196:	81 e0       	ldi	r24, 0x01	; 1
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <DIO_setPinDirection+0xca>
 19c:	88 0f       	add	r24, r24
 19e:	99 1f       	adc	r25, r25
 1a0:	6a 95       	dec	r22
 1a2:	e2 f7       	brpl	.-8      	; 0x19c <DIO_setPinDirection+0xc6>
 1a4:	82 2b       	or	r24, r18
 1a6:	81 bb       	out	0x11, r24	; 17
 1a8:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRD,PinId);
 1aa:	21 b3       	in	r18, 0x11	; 17
 1ac:	81 e0       	ldi	r24, 0x01	; 1
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <DIO_setPinDirection+0xe0>
 1b2:	88 0f       	add	r24, r24
 1b4:	99 1f       	adc	r25, r25
 1b6:	6a 95       	dec	r22
 1b8:	e2 f7       	brpl	.-8      	; 0x1b2 <DIO_setPinDirection+0xdc>
 1ba:	80 95       	com	r24
 1bc:	82 23       	and	r24, r18
 1be:	81 bb       	out	0x11, r24	; 17
 1c0:	08 95       	ret

000001c2 <main>:
// HAL
#include "LCD_Interface.h"
#include "LCD_config.h"

int main(void)
{
 1c2:	cf 93       	push	r28
 1c4:	df 93       	push	r29
 1c6:	00 d0       	rcall	.+0      	; 0x1c8 <main+0x6>
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
	
	// LCD Set Direction
	DIO_setPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_INPUT);
 1cc:	40 e0       	ldi	r20, 0x00	; 0
 1ce:	64 e0       	ldi	r22, 0x04	; 4
 1d0:	80 e0       	ldi	r24, 0x00	; 0
 1d2:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_INPUT);
 1d6:	40 e0       	ldi	r20, 0x00	; 0
 1d8:	65 e0       	ldi	r22, 0x05	; 5
 1da:	80 e0       	ldi	r24, 0x00	; 0
 1dc:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_INPUT);
 1e0:	40 e0       	ldi	r20, 0x00	; 0
 1e2:	66 e0       	ldi	r22, 0x06	; 6
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_INPUT);
 1ea:	40 e0       	ldi	r20, 0x00	; 0
 1ec:	67 e0       	ldi	r22, 0x07	; 7
 1ee:	80 e0       	ldi	r24, 0x00	; 0
 1f0:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN3,DIO_PIN_OUTPUT);
	DIO_setPinDirection(DIO_PORTC,DIO_PIN2,DIO_PIN_OUTPUT);
	DIO_setPinDirection(DIO_PORTC,DIO_PIN7,DIO_PIN_OUTPUT);*/
	
	
	DIO_setPinDirection(DIO_PORTD,DIO_PIN0,DIO_PIN_INPUT); // Rx
 1f4:	40 e0       	ldi	r20, 0x00	; 0
 1f6:	60 e0       	ldi	r22, 0x00	; 0
 1f8:	83 e0       	ldi	r24, 0x03	; 3
 1fa:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTD,DIO_PIN1,DIO_PIN_OUTPUT); //Tx
 1fe:	41 e0       	ldi	r20, 0x01	; 1
 200:	61 e0       	ldi	r22, 0x01	; 1
 202:	83 e0       	ldi	r24, 0x03	; 3
 204:	0e 94 6b 00 	call	0xd6	; 0xd6 <DIO_setPinDirection>
	
	UART_init();
 208:	0e 94 1c 01 	call	0x238	; 0x238 <UART_init>
	
	
	ADC_init();
 20c:	0e 94 36 00 	call	0x6c	; 0x6c <ADC_init>
	
	u16 digitalValue ,analogVal ;
	
	while (1)
	{
		ADC_getDigitalValue(ADC_CHANNEL6,&digitalValue);
 210:	be 01       	movw	r22, r28
 212:	6f 5f       	subi	r22, 0xFF	; 255
 214:	7f 4f       	sbci	r23, 0xFF	; 255
 216:	86 e0       	ldi	r24, 0x06	; 6
 218:	0e 94 52 00 	call	0xa4	; 0xa4 <ADC_getDigitalValue>
		
		
		
		UART_TxChar((u8)(digitalValue-500));
 21c:	89 81       	ldd	r24, Y+1	; 0x01
 21e:	84 5f       	subi	r24, 0xF4	; 244
 220:	0e 94 2a 01 	call	0x254	; 0x254 <UART_TxChar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 224:	2f ef       	ldi	r18, 0xFF	; 255
 226:	89 e6       	ldi	r24, 0x69	; 105
 228:	98 e1       	ldi	r25, 0x18	; 24
 22a:	21 50       	subi	r18, 0x01	; 1
 22c:	80 40       	sbci	r24, 0x00	; 0
 22e:	90 40       	sbci	r25, 0x00	; 0
 230:	e1 f7       	brne	.-8      	; 0x22a <main+0x68>
 232:	00 c0       	rjmp	.+0      	; 0x234 <main+0x72>
 234:	00 00       	nop
 236:	ec cf       	rjmp	.-40     	; 0x210 <main+0x4e>

00000238 <UART_init>:
#include   "UART_interface.h"

void UART_init(void)
{
    // writing the UCSRC, // Select UART mode = Asynchronous , // configure no parity .... 
	UCSRC = 0X86 ; // 0b1000110
 238:	86 e8       	ldi	r24, 0x86	; 134
 23a:	80 bd       	out	0x20, r24	; 32
    CLR_BIT(UCSRB,2);
 23c:	8a b1       	in	r24, 0x0a	; 10
 23e:	8b 7f       	andi	r24, 0xFB	; 251
 240:	8a b9       	out	0x0a, r24	; 10
	
	// Set buad rate = 9600 ;
	UBRRL = 103 ;
 242:	87 e6       	ldi	r24, 0x67	; 103
 244:	89 b9       	out	0x09, r24	; 9

    // Enable Tx
	SET_BIT(UCSRB,3);
 246:	8a b1       	in	r24, 0x0a	; 10
 248:	88 60       	ori	r24, 0x08	; 8
 24a:	8a b9       	out	0x0a, r24	; 10
    // Enable Rx
	SET_BIT(UCSRB,4);
 24c:	8a b1       	in	r24, 0x0a	; 10
 24e:	80 61       	ori	r24, 0x10	; 16
 250:	8a b9       	out	0x0a, r24	; 10
 252:	08 95       	ret

00000254 <UART_TxChar>:
}
 
void UART_TxChar(u8 data)
{
    UDR = data ;
 254:	8c b9       	out	0x0c, r24	; 12
	while (0== GET_BIT(UCSRA,5)); 	
 256:	5d 9b       	sbis	0x0b, 5	; 11
 258:	fe cf       	rjmp	.-4      	; 0x256 <UART_TxChar+0x2>
}
 25a:	08 95       	ret

0000025c <_exit>:
 25c:	f8 94       	cli

0000025e <__stop_program>:
 25e:	ff cf       	rjmp	.-2      	; 0x25e <__stop_program>
