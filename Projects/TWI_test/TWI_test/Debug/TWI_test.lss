
TWI_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005f8  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000064c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000064c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000067c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000180  00000000  00000000  000006b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001d08  00000000  00000000  00000838  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000975  00000000  00000000  00002540  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000f04  00000000  00000000  00002eb5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000300  00000000  00000000  00003dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000657  00000000  00000000  000040bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000f21  00000000  00000000  00004713  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000148  00000000  00000000  00005634  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 48 02 	call	0x490	; 0x490 <main>
  64:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_setPinDirection>:
/* PINS APIS*/ 

void DIO_setPinDirection(u8 PortId, u8 PinId , u8 PinDirection ) 

{
 if ( (PortId<=3) && (PinId<=7) && ((PinDirection == DIO_PIN_OUTPUT ) || (PinDirection == DIO_PIN_INPUT)) )
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_setPinDirection+0x6>
  70:	72 c0       	rjmp	.+228    	; 0x156 <DIO_setPinDirection+0xea>
  72:	68 30       	cpi	r22, 0x08	; 8
  74:	08 f0       	brcs	.+2      	; 0x78 <DIO_setPinDirection+0xc>
  76:	6f c0       	rjmp	.+222    	; 0x156 <DIO_setPinDirection+0xea>
  78:	42 30       	cpi	r20, 0x02	; 2
  7a:	08 f0       	brcs	.+2      	; 0x7e <DIO_setPinDirection+0x12>
  7c:	6c c0       	rjmp	.+216    	; 0x156 <DIO_setPinDirection+0xea>
 { 
	switch (PortId)  // DIO PORTA
  7e:	81 30       	cpi	r24, 0x01	; 1
  80:	01 f1       	breq	.+64     	; 0xc2 <DIO_setPinDirection+0x56>
  82:	30 f0       	brcs	.+12     	; 0x90 <DIO_setPinDirection+0x24>
  84:	82 30       	cpi	r24, 0x02	; 2
  86:	b1 f1       	breq	.+108    	; 0xf4 <DIO_setPinDirection+0x88>
  88:	83 30       	cpi	r24, 0x03	; 3
  8a:	09 f4       	brne	.+2      	; 0x8e <DIO_setPinDirection+0x22>
  8c:	4c c0       	rjmp	.+152    	; 0x126 <DIO_setPinDirection+0xba>
  8e:	08 95       	ret
	{
		case 0 : 
		if (DIO_PIN_OUTPUT == PinDirection)
  90:	41 30       	cpi	r20, 0x01	; 1
  92:	59 f4       	brne	.+22     	; 0xaa <DIO_setPinDirection+0x3e>
		{
			SET_BIT(DDRA,PinId);
  94:	2a b3       	in	r18, 0x1a	; 26
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <DIO_setPinDirection+0x34>
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <DIO_setPinDirection+0x30>
  a4:	82 2b       	or	r24, r18
  a6:	8a bb       	out	0x1a, r24	; 26
  a8:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRA,PinId);
  aa:	2a b3       	in	r18, 0x1a	; 26
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_setPinDirection+0x4a>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_setPinDirection+0x46>
  ba:	80 95       	com	r24
  bc:	82 23       	and	r24, r18
  be:	8a bb       	out	0x1a, r24	; 26
  c0:	08 95       	ret
		}
		break ;
		
		case 1 : // DIO PORTB 
		if (DIO_PIN_OUTPUT == PinDirection)
  c2:	41 30       	cpi	r20, 0x01	; 1
  c4:	59 f4       	brne	.+22     	; 0xdc <DIO_setPinDirection+0x70>
		{
			SET_BIT(DDRB,PinId);
  c6:	27 b3       	in	r18, 0x17	; 23
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_setPinDirection+0x66>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_setPinDirection+0x62>
  d6:	82 2b       	or	r24, r18
  d8:	87 bb       	out	0x17, r24	; 23
  da:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRB,PinId);
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_setPinDirection+0x7c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_setPinDirection+0x78>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	87 bb       	out	0x17, r24	; 23
  f2:	08 95       	ret
		}
		break ;
		
		case 2 : // DIO PORTC 
		if (DIO_PIN_OUTPUT == PinDirection)
  f4:	41 30       	cpi	r20, 0x01	; 1
  f6:	59 f4       	brne	.+22     	; 0x10e <DIO_setPinDirection+0xa2>
		{
			SET_BIT(DDRC,PinId);
  f8:	24 b3       	in	r18, 0x14	; 20
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_setPinDirection+0x98>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_setPinDirection+0x94>
 108:	82 2b       	or	r24, r18
 10a:	84 bb       	out	0x14, r24	; 20
 10c:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRC,PinId);
 10e:	24 b3       	in	r18, 0x14	; 20
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_setPinDirection+0xae>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_setPinDirection+0xaa>
 11e:	80 95       	com	r24
 120:	82 23       	and	r24, r18
 122:	84 bb       	out	0x14, r24	; 20
 124:	08 95       	ret
		}
		break ;
		
		case 3 : // DIO PORTD 
		if (DIO_PIN_OUTPUT == PinDirection)
 126:	41 30       	cpi	r20, 0x01	; 1
 128:	59 f4       	brne	.+22     	; 0x140 <DIO_setPinDirection+0xd4>
		{
			SET_BIT(DDRD,PinId);
 12a:	21 b3       	in	r18, 0x11	; 17
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_setPinDirection+0xca>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_setPinDirection+0xc6>
 13a:	82 2b       	or	r24, r18
 13c:	81 bb       	out	0x11, r24	; 17
 13e:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRD,PinId);
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_setPinDirection+0xe0>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_setPinDirection+0xdc>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	81 bb       	out	0x11, r24	; 17
 156:	08 95       	ret

00000158 <DIO_setPinValue>:
}

void DIO_setPinValue(u8 PortId, u8 PinId , u8 PinValue)

{
	 if ( (PortId<=3) && (PinId<=7) && ((PinValue == DIO_PIN_HIGH ) || (PinValue == DIO_PIN_LOW)) )
 158:	84 30       	cpi	r24, 0x04	; 4
 15a:	08 f0       	brcs	.+2      	; 0x15e <DIO_setPinValue+0x6>
 15c:	72 c0       	rjmp	.+228    	; 0x242 <DIO_setPinValue+0xea>
 15e:	68 30       	cpi	r22, 0x08	; 8
 160:	08 f0       	brcs	.+2      	; 0x164 <DIO_setPinValue+0xc>
 162:	6f c0       	rjmp	.+222    	; 0x242 <DIO_setPinValue+0xea>
 164:	42 30       	cpi	r20, 0x02	; 2
 166:	08 f0       	brcs	.+2      	; 0x16a <DIO_setPinValue+0x12>
 168:	6c c0       	rjmp	.+216    	; 0x242 <DIO_setPinValue+0xea>
	 {
		 switch (PortId) 
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	01 f1       	breq	.+64     	; 0x1ae <DIO_setPinValue+0x56>
 16e:	30 f0       	brcs	.+12     	; 0x17c <DIO_setPinValue+0x24>
 170:	82 30       	cpi	r24, 0x02	; 2
 172:	b1 f1       	breq	.+108    	; 0x1e0 <DIO_setPinValue+0x88>
 174:	83 30       	cpi	r24, 0x03	; 3
 176:	09 f4       	brne	.+2      	; 0x17a <DIO_setPinValue+0x22>
 178:	4c c0       	rjmp	.+152    	; 0x212 <DIO_setPinValue+0xba>
 17a:	08 95       	ret
		 {
			 case 0 : // DIO_PORTA
			 if (DIO_PIN_HIGH==PinValue)
 17c:	41 30       	cpi	r20, 0x01	; 1
 17e:	59 f4       	brne	.+22     	; 0x196 <DIO_setPinValue+0x3e>
			 {
			    SET_BIT(PORTA,PinId);
 180:	2b b3       	in	r18, 0x1b	; 27
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_setPinValue+0x34>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_setPinValue+0x30>
 190:	82 2b       	or	r24, r18
 192:	8b bb       	out	0x1b, r24	; 27
 194:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTA,PinId) ; 
 196:	2b b3       	in	r18, 0x1b	; 27
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_setPinValue+0x4a>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_setPinValue+0x46>
 1a6:	80 95       	com	r24
 1a8:	82 23       	and	r24, r18
 1aa:	8b bb       	out	0x1b, r24	; 27
 1ac:	08 95       	ret
			 }
			 break ; 
			 
			 case 1 : // DIO_PORTB
			 if (DIO_PIN_HIGH==PinValue)
 1ae:	41 30       	cpi	r20, 0x01	; 1
 1b0:	59 f4       	brne	.+22     	; 0x1c8 <DIO_setPinValue+0x70>
			 {
			    SET_BIT(PORTB,PinId);
 1b2:	28 b3       	in	r18, 0x18	; 24
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_setPinValue+0x66>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_setPinValue+0x62>
 1c2:	82 2b       	or	r24, r18
 1c4:	88 bb       	out	0x18, r24	; 24
 1c6:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTB,PinId) ; 
 1c8:	28 b3       	in	r18, 0x18	; 24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_setPinValue+0x7c>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_setPinValue+0x78>
 1d8:	80 95       	com	r24
 1da:	82 23       	and	r24, r18
 1dc:	88 bb       	out	0x18, r24	; 24
 1de:	08 95       	ret
			 }
			 break ; 
			 
			 case 2 : // DIO_PORTC
			 if (DIO_PIN_HIGH==PinValue)
 1e0:	41 30       	cpi	r20, 0x01	; 1
 1e2:	59 f4       	brne	.+22     	; 0x1fa <DIO_setPinValue+0xa2>
			 {
			    SET_BIT(PORTC,PinId);
 1e4:	25 b3       	in	r18, 0x15	; 21
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_setPinValue+0x98>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_setPinValue+0x94>
 1f4:	82 2b       	or	r24, r18
 1f6:	85 bb       	out	0x15, r24	; 21
 1f8:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTC,PinId) ; 
 1fa:	25 b3       	in	r18, 0x15	; 21
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_setPinValue+0xae>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_setPinValue+0xaa>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	85 bb       	out	0x15, r24	; 21
 210:	08 95       	ret
			 }
			 break ; 
			 
			 case 3 : // DIO_PORTD
			 if (DIO_PIN_HIGH==PinValue)
 212:	41 30       	cpi	r20, 0x01	; 1
 214:	59 f4       	brne	.+22     	; 0x22c <DIO_setPinValue+0xd4>
			 {
			    SET_BIT(PORTD,PinId);
 216:	22 b3       	in	r18, 0x12	; 18
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_setPinValue+0xca>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_setPinValue+0xc6>
 226:	82 2b       	or	r24, r18
 228:	82 bb       	out	0x12, r24	; 18
 22a:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTD,PinId) ; 
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_setPinValue+0xe0>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_setPinValue+0xdc>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	82 bb       	out	0x12, r24	; 18
 242:	08 95       	ret

00000244 <EEPROM_writeByte>:

/* HAL */ 
#include "EEPROM_interface.h"

void EEPROM_writeByte(u16 byteAddress,u8 data)
{
 244:	1f 93       	push	r17
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	d8 2f       	mov	r29, r24
 24c:	c6 2f       	mov	r28, r22
	u8 address = (u8) ( EEPROM_FIXED_ADDRESS | (u8)(byteAddress >> 8)) ; // 0b01010000
 24e:	19 2f       	mov	r17, r25
 250:	10 65       	ori	r17, 0x50	; 80
	
	// Send Start Condition 
	TWI_sendStartCondition(); 
 252:	0e 94 93 02 	call	0x526	; 0x526 <TWI_sendStartCondition>
	
	// Send Slave Address With Write Operation
	TWI_sendSlaveAddWithWrite(address);
 256:	81 2f       	mov	r24, r17
 258:	0e 94 b6 02 	call	0x56c	; 0x56c <TWI_sendSlaveAddWithWrite>
	
	// Send Byte Address 
	TWI_sendMasterDataByte((u8)byteAddress);
 25c:	8d 2f       	mov	r24, r29
 25e:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <TWI_sendMasterDataByte>
	
	// Send Byte Data
	TWI_sendMasterDataByte(data);
 262:	8c 2f       	mov	r24, r28
 264:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <TWI_sendMasterDataByte>
	
	// Send Stop Condition 
	TWI_sendStopCondition();
 268:	0e 94 af 02 	call	0x55e	; 0x55e <TWI_sendStopCondition>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 26c:	8f e1       	ldi	r24, 0x1F	; 31
 26e:	9e e4       	ldi	r25, 0x4E	; 78
 270:	01 97       	sbiw	r24, 0x01	; 1
 272:	f1 f7       	brne	.-4      	; 0x270 <EEPROM_writeByte+0x2c>
 274:	00 c0       	rjmp	.+0      	; 0x276 <EEPROM_writeByte+0x32>
 276:	00 00       	nop
	
	_delay_ms(5);
}
 278:	df 91       	pop	r29
 27a:	cf 91       	pop	r28
 27c:	1f 91       	pop	r17
 27e:	08 95       	ret

00000280 <EEPROM_readByte>:

void EEPROM_readByte(u16 byteAddress,u8* returnedData)
{
 280:	0f 93       	push	r16
 282:	1f 93       	push	r17
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	d8 2f       	mov	r29, r24
 28a:	8b 01       	movw	r16, r22
	u8 address = (u8) ( EEPROM_FIXED_ADDRESS | (u8)(byteAddress >> 8)) ; // 0b01010000
 28c:	c9 2f       	mov	r28, r25
 28e:	c0 65       	ori	r28, 0x50	; 80
	
	// Send Start Condition 
	TWI_sendStartCondition(); 
 290:	0e 94 93 02 	call	0x526	; 0x526 <TWI_sendStartCondition>
	
	// Send Slave Address With Write Operation
	TWI_sendSlaveAddWithWrite(address);
 294:	8c 2f       	mov	r24, r28
 296:	0e 94 b6 02 	call	0x56c	; 0x56c <TWI_sendSlaveAddWithWrite>
	
	// Send Byte Address
	TWI_sendMasterDataByte((u8)byteAddress);
 29a:	8d 2f       	mov	r24, r29
 29c:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <TWI_sendMasterDataByte>
	
	// Send Repeated Start
	TWI_sendRepStartCondition(); 
 2a0:	0e 94 a1 02 	call	0x542	; 0x542 <TWI_sendRepStartCondition>
	
	// Send Slave Address With Read Operation
	TWI_sendSlaveAddWithRead(address);
 2a4:	8c 2f       	mov	r24, r28
 2a6:	0e 94 cb 02 	call	0x596	; 0x596 <TWI_sendSlaveAddWithRead>
	
	// Read Byte Data
	TWI_readMasterDataByte(returnedData);
 2aa:	c8 01       	movw	r24, r16
 2ac:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <TWI_readMasterDataByte>
	
	// Send Stop Condition 
	TWI_sendStopCondition();
 2b0:	0e 94 af 02 	call	0x55e	; 0x55e <TWI_sendStopCondition>
 2b4:	8f e1       	ldi	r24, 0x1F	; 31
 2b6:	9e e4       	ldi	r25, 0x4E	; 78
 2b8:	01 97       	sbiw	r24, 0x01	; 1
 2ba:	f1 f7       	brne	.-4      	; 0x2b8 <EEPROM_readByte+0x38>
 2bc:	00 c0       	rjmp	.+0      	; 0x2be <EEPROM_readByte+0x3e>
 2be:	00 00       	nop
	
	_delay_ms(5);
	
 2c0:	df 91       	pop	r29
 2c2:	cf 91       	pop	r28
 2c4:	1f 91       	pop	r17
 2c6:	0f 91       	pop	r16
 2c8:	08 95       	ret

000002ca <writeHalfPort>:
	
	#endif
}

static void writeHalfPort(u8 Value)
{
 2ca:	cf 93       	push	r28
 2cc:	c8 2f       	mov	r28, r24
	if (1==GET_BIT(Value,0))
 2ce:	80 ff       	sbrs	r24, 0
 2d0:	06 c0       	rjmp	.+12     	; 0x2de <writeHalfPort+0x14>
	{
		DIO_setPinValue(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_HIGH);
 2d2:	41 e0       	ldi	r20, 0x01	; 1
 2d4:	64 e0       	ldi	r22, 0x04	; 4
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 2dc:	05 c0       	rjmp	.+10     	; 0x2e8 <writeHalfPort+0x1e>
	}
	else 
	{
		DIO_setPinValue(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_LOW);
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	64 e0       	ldi	r22, 0x04	; 4
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	}
	
	if (1==GET_BIT(Value,1))
 2e8:	c1 ff       	sbrs	r28, 1
 2ea:	06 c0       	rjmp	.+12     	; 0x2f8 <writeHalfPort+0x2e>
	{
		DIO_setPinValue(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_HIGH);
 2ec:	41 e0       	ldi	r20, 0x01	; 1
 2ee:	65 e0       	ldi	r22, 0x05	; 5
 2f0:	80 e0       	ldi	r24, 0x00	; 0
 2f2:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 2f6:	05 c0       	rjmp	.+10     	; 0x302 <writeHalfPort+0x38>
	}
	else
	{
		DIO_setPinValue(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_LOW);
 2f8:	40 e0       	ldi	r20, 0x00	; 0
 2fa:	65 e0       	ldi	r22, 0x05	; 5
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	}
	
	if (1==GET_BIT(Value,2))
 302:	c2 ff       	sbrs	r28, 2
 304:	06 c0       	rjmp	.+12     	; 0x312 <writeHalfPort+0x48>
	{
		DIO_setPinValue(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_HIGH);
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	66 e0       	ldi	r22, 0x06	; 6
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 310:	05 c0       	rjmp	.+10     	; 0x31c <writeHalfPort+0x52>
	}
	else
	{
		DIO_setPinValue(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_LOW);
 312:	40 e0       	ldi	r20, 0x00	; 0
 314:	66 e0       	ldi	r22, 0x06	; 6
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	}
	
	if (1==GET_BIT(Value,3))
 31c:	c3 ff       	sbrs	r28, 3
 31e:	06 c0       	rjmp	.+12     	; 0x32c <writeHalfPort+0x62>
	{
		DIO_setPinValue(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_HIGH);
 320:	41 e0       	ldi	r20, 0x01	; 1
 322:	67 e0       	ldi	r22, 0x07	; 7
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 32a:	05 c0       	rjmp	.+10     	; 0x336 <writeHalfPort+0x6c>
	}
	else
	{
		DIO_setPinValue(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_LOW);
 32c:	40 e0       	ldi	r20, 0x00	; 0
 32e:	67 e0       	ldi	r22, 0x07	; 7
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	}
}
 336:	cf 91       	pop	r28
 338:	08 95       	ret

0000033a <LCD_sendCmnd>:
	
}

void LCD_sendCmnd(u8 Cmnd)

{
 33a:	cf 93       	push	r28
 33c:	c8 2f       	mov	r28, r24
	// set RS pin = 0 ( write command) 
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	
	// set RW pin = 0 ( write )
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
 348:	40 e0       	ldi	r20, 0x00	; 0
 34a:	62 e0       	ldi	r22, 0x02	; 2
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#elif LCD_MODE == LCD_4_BIT_MODE
	
	// Write the most 4-bit command on data pins
	writeHalfPort(Cmnd>>4);
 352:	8c 2f       	mov	r24, r28
 354:	82 95       	swap	r24
 356:	8f 70       	andi	r24, 0x0F	; 15
 358:	0e 94 65 01 	call	0x2ca	; 0x2ca <writeHalfPort>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 35c:	41 e0       	ldi	r20, 0x01	; 1
 35e:	63 e0       	ldi	r22, 0x03	; 3
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 366:	8f e9       	ldi	r24, 0x9F	; 159
 368:	9f e0       	ldi	r25, 0x0F	; 15
 36a:	01 97       	sbiw	r24, 0x01	; 1
 36c:	f1 f7       	brne	.-4      	; 0x36a <LCD_sendCmnd+0x30>
 36e:	00 c0       	rjmp	.+0      	; 0x370 <LCD_sendCmnd+0x36>
 370:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 372:	40 e0       	ldi	r20, 0x00	; 0
 374:	63 e0       	ldi	r22, 0x03	; 3
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	
	// Write the Least 4-bit command on data pins
	writeHalfPort(Cmnd);
 37c:	8c 2f       	mov	r24, r28
 37e:	0e 94 65 01 	call	0x2ca	; 0x2ca <writeHalfPort>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 382:	41 e0       	ldi	r20, 0x01	; 1
 384:	63 e0       	ldi	r22, 0x03	; 3
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 38c:	8f e9       	ldi	r24, 0x9F	; 159
 38e:	9f e0       	ldi	r25, 0x0F	; 15
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <LCD_sendCmnd+0x56>
 394:	00 c0       	rjmp	.+0      	; 0x396 <LCD_sendCmnd+0x5c>
 396:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 398:	40 e0       	ldi	r20, 0x00	; 0
 39a:	63 e0       	ldi	r22, 0x03	; 3
 39c:	81 e0       	ldi	r24, 0x01	; 1
 39e:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	#endif 
	
}
 3a2:	cf 91       	pop	r28
 3a4:	08 95       	ret

000003a6 <LCD_init>:
 3a6:	2f e7       	ldi	r18, 0x7F	; 127
 3a8:	85 eb       	ldi	r24, 0xB5	; 181
 3aa:	91 e0       	ldi	r25, 0x01	; 1
 3ac:	21 50       	subi	r18, 0x01	; 1
 3ae:	80 40       	sbci	r24, 0x00	; 0
 3b0:	90 40       	sbci	r25, 0x00	; 0
 3b2:	e1 f7       	brne	.-8      	; 0x3ac <LCD_init+0x6>
 3b4:	00 c0       	rjmp	.+0      	; 0x3b6 <LCD_init+0x10>
 3b6:	00 00       	nop
	#if LCD_MODE == LCD_8_BIT_MODE
	LCD_sendCmnd(0b00111000); // Function Set command 2*16 LCD
	
	#elif LCD_MODE == LCD_4_BIT_MODE
	// set RS pin = 0 ( write command)
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
 3b8:	40 e0       	ldi	r20, 0x00	; 0
 3ba:	61 e0       	ldi	r22, 0x01	; 1
 3bc:	81 e0       	ldi	r24, 0x01	; 1
 3be:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	
	// set RW pin = 0 ( write )
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
 3c2:	40 e0       	ldi	r20, 0x00	; 0
 3c4:	62 e0       	ldi	r22, 0x02	; 2
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	
	writeHalfPort(0b0010);
 3cc:	82 e0       	ldi	r24, 0x02	; 2
 3ce:	0e 94 65 01 	call	0x2ca	; 0x2ca <writeHalfPort>
	
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	63 e0       	ldi	r22, 0x03	; 3
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 3dc:	8f e9       	ldi	r24, 0x9F	; 159
 3de:	9f e0       	ldi	r25, 0x0F	; 15
 3e0:	01 97       	sbiw	r24, 0x01	; 1
 3e2:	f1 f7       	brne	.-4      	; 0x3e0 <LCD_init+0x3a>
 3e4:	00 c0       	rjmp	.+0      	; 0x3e6 <LCD_init+0x40>
 3e6:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 3e8:	40 e0       	ldi	r20, 0x00	; 0
 3ea:	63 e0       	ldi	r22, 0x03	; 3
 3ec:	81 e0       	ldi	r24, 0x01	; 1
 3ee:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	
	LCD_sendCmnd(0b00101000);
 3f2:	88 e2       	ldi	r24, 0x28	; 40
 3f4:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_sendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3f8:	90 ef       	ldi	r25, 0xF0	; 240
 3fa:	9a 95       	dec	r25
 3fc:	f1 f7       	brne	.-4      	; 0x3fa <LCD_init+0x54>
	#endif
	
	_delay_us(45);
	
	// display on , cursor off , blink on 
	LCD_sendCmnd(0b00001101);
 3fe:	8d e0       	ldi	r24, 0x0D	; 13
 400:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_sendCmnd>
 404:	20 ef       	ldi	r18, 0xF0	; 240
 406:	2a 95       	dec	r18
 408:	f1 f7       	brne	.-4      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
	_delay_us(45);
	
	// clear display 
	LCD_sendCmnd(0b00000001);
 40a:	81 e0       	ldi	r24, 0x01	; 1
 40c:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_sendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 410:	8f e3       	ldi	r24, 0x3F	; 63
 412:	9f e1       	ldi	r25, 0x1F	; 31
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
	_delay_ms(2);
	
	// set entry mode 
	LCD_sendCmnd(0b00000110);
 41c:	86 e0       	ldi	r24, 0x06	; 6
 41e:	0e 94 9d 01 	call	0x33a	; 0x33a <LCD_sendCmnd>
 422:	08 95       	ret

00000424 <LCD_sendChar>:
	
}

void LCD_sendChar(u8 Data)

{
 424:	cf 93       	push	r28
 426:	c8 2f       	mov	r28, r24
	// set RS pin = 1 ( write Data)
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
 428:	41 e0       	ldi	r20, 0x01	; 1
 42a:	61 e0       	ldi	r22, 0x01	; 1
 42c:	81 e0       	ldi	r24, 0x01	; 1
 42e:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	
	// set RW pin = 0 ( write )
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
 432:	40 e0       	ldi	r20, 0x00	; 0
 434:	62 e0       	ldi	r22, 0x02	; 2
 436:	81 e0       	ldi	r24, 0x01	; 1
 438:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#elif LCD_MODE == LCD_4_BIT_MODE
	
	// Write the most 4-bit Data on data pins
	writeHalfPort(Data>>4);
 43c:	8c 2f       	mov	r24, r28
 43e:	82 95       	swap	r24
 440:	8f 70       	andi	r24, 0x0F	; 15
 442:	0e 94 65 01 	call	0x2ca	; 0x2ca <writeHalfPort>
	
	 /* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 446:	41 e0       	ldi	r20, 0x01	; 1
 448:	63 e0       	ldi	r22, 0x03	; 3
 44a:	81 e0       	ldi	r24, 0x01	; 1
 44c:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 450:	8f e9       	ldi	r24, 0x9F	; 159
 452:	9f e0       	ldi	r25, 0x0F	; 15
 454:	01 97       	sbiw	r24, 0x01	; 1
 456:	f1 f7       	brne	.-4      	; 0x454 <LCD_sendChar+0x30>
 458:	00 c0       	rjmp	.+0      	; 0x45a <LCD_sendChar+0x36>
 45a:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 45c:	40 e0       	ldi	r20, 0x00	; 0
 45e:	63 e0       	ldi	r22, 0x03	; 3
 460:	81 e0       	ldi	r24, 0x01	; 1
 462:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	
	// Write the Least 4-bit Data on data pins
	writeHalfPort(Data);
 466:	8c 2f       	mov	r24, r28
 468:	0e 94 65 01 	call	0x2ca	; 0x2ca <writeHalfPort>
	
	 /* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 46c:	41 e0       	ldi	r20, 0x01	; 1
 46e:	63 e0       	ldi	r22, 0x03	; 3
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 476:	8f e9       	ldi	r24, 0x9F	; 159
 478:	9f e0       	ldi	r25, 0x0F	; 15
 47a:	01 97       	sbiw	r24, 0x01	; 1
 47c:	f1 f7       	brne	.-4      	; 0x47a <LCD_sendChar+0x56>
 47e:	00 c0       	rjmp	.+0      	; 0x480 <LCD_sendChar+0x5c>
 480:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 482:	40 e0       	ldi	r20, 0x00	; 0
 484:	63 e0       	ldi	r22, 0x03	; 3
 486:	81 e0       	ldi	r24, 0x01	; 1
 488:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	
	#endif
}
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <main>:
#include "LCD_config.h"



int main(void)
{
 490:	cf 93       	push	r28
 492:	df 93       	push	r29
 494:	1f 92       	push	r1
 496:	cd b7       	in	r28, 0x3d	; 61
 498:	de b7       	in	r29, 0x3e	; 62
	 DIO_setPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_OUTPUT);
 49a:	41 e0       	ldi	r20, 0x01	; 1
 49c:	64 e0       	ldi	r22, 0x04	; 4
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	 DIO_setPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_OUTPUT);
 4a4:	41 e0       	ldi	r20, 0x01	; 1
 4a6:	65 e0       	ldi	r22, 0x05	; 5
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	 DIO_setPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT);
 4ae:	41 e0       	ldi	r20, 0x01	; 1
 4b0:	66 e0       	ldi	r22, 0x06	; 6
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	 DIO_setPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_OUTPUT);
 4b8:	41 e0       	ldi	r20, 0x01	; 1
 4ba:	67 e0       	ldi	r22, 0x07	; 7
 4bc:	80 e0       	ldi	r24, 0x00	; 0
 4be:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	 
	 DIO_setPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_OUTPUT);
 4c2:	41 e0       	ldi	r20, 0x01	; 1
 4c4:	61 e0       	ldi	r22, 0x01	; 1
 4c6:	81 e0       	ldi	r24, 0x01	; 1
 4c8:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	 DIO_setPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_OUTPUT);
 4cc:	41 e0       	ldi	r20, 0x01	; 1
 4ce:	62 e0       	ldi	r22, 0x02	; 2
 4d0:	81 e0       	ldi	r24, 0x01	; 1
 4d2:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	 DIO_setPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);
 4d6:	41 e0       	ldi	r20, 0x01	; 1
 4d8:	63 e0       	ldi	r22, 0x03	; 3
 4da:	81 e0       	ldi	r24, 0x01	; 1
 4dc:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	 
	 LCD_init();
 4e0:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <LCD_init>
	
	u8 data ;  
	
    TWI_initMaster(); 
 4e4:	0e 94 84 02 	call	0x508	; 0x508 <TWI_initMaster>
	
	EEPROM_writeByte(94,'A');
 4e8:	61 e4       	ldi	r22, 0x41	; 65
 4ea:	8e e5       	ldi	r24, 0x5E	; 94
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 22 01 	call	0x244	; 0x244 <EEPROM_writeByte>
	EEPROM_readByte(94,&data); 
 4f2:	be 01       	movw	r22, r28
 4f4:	6f 5f       	subi	r22, 0xFF	; 255
 4f6:	7f 4f       	sbci	r23, 0xFF	; 255
 4f8:	8e e5       	ldi	r24, 0x5E	; 94
 4fa:	90 e0       	ldi	r25, 0x00	; 0
 4fc:	0e 94 40 01 	call	0x280	; 0x280 <EEPROM_readByte>
	
	LCD_sendChar(data);
 500:	89 81       	ldd	r24, Y+1	; 0x01
 502:	0e 94 12 02 	call	0x424	; 0x424 <LCD_sendChar>
 506:	ff cf       	rjmp	.-2      	; 0x506 <main+0x76>

00000508 <TWI_initMaster>:
		
		// Enable ACK
		SET_BIT(TWCR,6);
		
		// Enable TWI
		SET_BIT(TWCR,2);
 508:	81 b1       	in	r24, 0x01	; 1
 50a:	8e 7f       	andi	r24, 0xFE	; 254
 50c:	81 b9       	out	0x01, r24	; 1
 50e:	81 b1       	in	r24, 0x01	; 1
 510:	8d 7f       	andi	r24, 0xFD	; 253
 512:	81 b9       	out	0x01, r24	; 1
 514:	8c e0       	ldi	r24, 0x0C	; 12
 516:	80 b9       	out	0x00, r24	; 0
 518:	86 b7       	in	r24, 0x36	; 54
 51a:	80 64       	ori	r24, 0x40	; 64
 51c:	86 bf       	out	0x36, r24	; 54
 51e:	86 b7       	in	r24, 0x36	; 54
 520:	84 60       	ori	r24, 0x04	; 4
 522:	86 bf       	out	0x36, r24	; 54
 524:	08 95       	ret

00000526 <TWI_sendStartCondition>:
}

void TWI_sendStartCondition(void)
{
	// Send Start Condition
	SET_BIT(TWCR,5);
 526:	86 b7       	in	r24, 0x36	; 54
 528:	80 62       	ori	r24, 0x20	; 32
 52a:	86 bf       	out	0x36, r24	; 54
	
	// Clear Flag To Start Current Job
	SET_BIT(TWCR,7);
 52c:	86 b7       	in	r24, 0x36	; 54
 52e:	80 68       	ori	r24, 0x80	; 128
 530:	86 bf       	out	0x36, r24	; 54
	
	// Wait For Flag
	while (0==GET_BIT(TWCR,7));
 532:	06 b6       	in	r0, 0x36	; 54
 534:	07 fe       	sbrs	r0, 7
 536:	fd cf       	rjmp	.-6      	; 0x532 <TWI_sendStartCondition+0xc>
	
	// Check ACK == SC ACK
	while((TWSR & 0xF8) != 0x08);
 538:	81 b1       	in	r24, 0x01	; 1
 53a:	88 7f       	andi	r24, 0xF8	; 248
 53c:	88 30       	cpi	r24, 0x08	; 8
 53e:	e1 f7       	brne	.-8      	; 0x538 <TWI_sendStartCondition+0x12>
}
 540:	08 95       	ret

00000542 <TWI_sendRepStartCondition>:

void TWI_sendRepStartCondition(void)
{
	// Send Start Condition
	SET_BIT(TWCR,5);
 542:	86 b7       	in	r24, 0x36	; 54
 544:	80 62       	ori	r24, 0x20	; 32
 546:	86 bf       	out	0x36, r24	; 54
	
	// Clear Flag To Start Current Job
	SET_BIT(TWCR,7);
 548:	86 b7       	in	r24, 0x36	; 54
 54a:	80 68       	ori	r24, 0x80	; 128
 54c:	86 bf       	out	0x36, r24	; 54
	
	// Wait For Flag
	while (0==GET_BIT(TWCR,7));
 54e:	06 b6       	in	r0, 0x36	; 54
 550:	07 fe       	sbrs	r0, 7
 552:	fd cf       	rjmp	.-6      	; 0x54e <TWI_sendRepStartCondition+0xc>
	
	// Check ACK == Repeated SC ACK
	while((TWSR & 0xF8) != 0x10);
 554:	81 b1       	in	r24, 0x01	; 1
 556:	88 7f       	andi	r24, 0xF8	; 248
 558:	80 31       	cpi	r24, 0x10	; 16
 55a:	e1 f7       	brne	.-8      	; 0x554 <TWI_sendRepStartCondition+0x12>
}
 55c:	08 95       	ret

0000055e <TWI_sendStopCondition>:

void TWI_sendStopCondition(void)
{
	// Send Stop Condition
	SET_BIT(TWCR,4);
 55e:	86 b7       	in	r24, 0x36	; 54
 560:	80 61       	ori	r24, 0x10	; 16
 562:	86 bf       	out	0x36, r24	; 54
	
	// Clear Flag To Start Current Job
	SET_BIT(TWCR,7);
 564:	86 b7       	in	r24, 0x36	; 54
 566:	80 68       	ori	r24, 0x80	; 128
 568:	86 bf       	out	0x36, r24	; 54
 56a:	08 95       	ret

0000056c <TWI_sendSlaveAddWithWrite>:
}

void TWI_sendSlaveAddWithWrite(u8 SlaveAdd)
{
	if (SlaveAdd < 128)
 56c:	88 23       	and	r24, r24
 56e:	94 f0       	brlt	.+36     	; 0x594 <TWI_sendSlaveAddWithWrite+0x28>
	{
	 // Select Slave Adress 	
     TWDR = SlaveAdd << 1 ;	
 570:	88 0f       	add	r24, r24
 572:	83 b9       	out	0x03, r24	; 3
	 
	 // Select Write Operation 
	 CLR_BIT(TWDR,0);
 574:	83 b1       	in	r24, 0x03	; 3
 576:	8e 7f       	andi	r24, 0xFE	; 254
 578:	83 b9       	out	0x03, r24	; 3
	 
	 // Clear Start Condition Bit
	 CLR_BIT(TWCR,5);
 57a:	86 b7       	in	r24, 0x36	; 54
 57c:	8f 7d       	andi	r24, 0xDF	; 223
 57e:	86 bf       	out	0x36, r24	; 54
	 
	 // Clear Flag To Start Current Job
	 SET_BIT(TWCR,7);
 580:	86 b7       	in	r24, 0x36	; 54
 582:	80 68       	ori	r24, 0x80	; 128
 584:	86 bf       	out	0x36, r24	; 54
	 
	 // Wait For Flag
	 while (0==GET_BIT(TWCR,7));
 586:	06 b6       	in	r0, 0x36	; 54
 588:	07 fe       	sbrs	r0, 7
 58a:	fd cf       	rjmp	.-6      	; 0x586 <TWI_sendSlaveAddWithWrite+0x1a>
	 
	 // Check ACK == Master Transmit (Slave Address + Write Request) ACK
	 while((TWSR & 0xF8) != 0x18);
 58c:	81 b1       	in	r24, 0x01	; 1
 58e:	88 7f       	andi	r24, 0xF8	; 248
 590:	88 31       	cpi	r24, 0x18	; 24
 592:	e1 f7       	brne	.-8      	; 0x58c <TWI_sendSlaveAddWithWrite+0x20>
 594:	08 95       	ret

00000596 <TWI_sendSlaveAddWithRead>:
}


void TWI_sendSlaveAddWithRead(u8 SlaveAdd)
{
   if (SlaveAdd < 128)
 596:	88 23       	and	r24, r24
 598:	94 f0       	brlt	.+36     	; 0x5be <TWI_sendSlaveAddWithRead+0x28>
   {
   	// Select Slave Adress
   	TWDR = SlaveAdd << 1 ;
 59a:	88 0f       	add	r24, r24
 59c:	83 b9       	out	0x03, r24	; 3
   	
   	// Select Read Operation
   	SET_BIT(TWDR,0);
 59e:	83 b1       	in	r24, 0x03	; 3
 5a0:	81 60       	ori	r24, 0x01	; 1
 5a2:	83 b9       	out	0x03, r24	; 3
   	
   	// Clear Start Condition Bit
   	CLR_BIT(TWCR,5);
 5a4:	86 b7       	in	r24, 0x36	; 54
 5a6:	8f 7d       	andi	r24, 0xDF	; 223
 5a8:	86 bf       	out	0x36, r24	; 54
   	
   	// Clear Flag To Start Current Job
   	SET_BIT(TWCR,7);
 5aa:	86 b7       	in	r24, 0x36	; 54
 5ac:	80 68       	ori	r24, 0x80	; 128
 5ae:	86 bf       	out	0x36, r24	; 54
   	
   	// Wait For Flag
   	while (0==GET_BIT(TWCR,7));
 5b0:	06 b6       	in	r0, 0x36	; 54
 5b2:	07 fe       	sbrs	r0, 7
 5b4:	fd cf       	rjmp	.-6      	; 0x5b0 <TWI_sendSlaveAddWithRead+0x1a>
   	
   	// Check ACK == Master Transmit (Slave Address + Read Request) ACK
   	while((TWSR & 0xF8) != 0x40);
 5b6:	81 b1       	in	r24, 0x01	; 1
 5b8:	88 7f       	andi	r24, 0xF8	; 248
 5ba:	80 34       	cpi	r24, 0x40	; 64
 5bc:	e1 f7       	brne	.-8      	; 0x5b6 <TWI_sendSlaveAddWithRead+0x20>
 5be:	08 95       	ret

000005c0 <TWI_sendMasterDataByte>:
}

void TWI_sendMasterDataByte(u8 data)
{
	// Write Data Into Data Register 
	TWDR = data ; 
 5c0:	83 b9       	out	0x03, r24	; 3
	
	// Clear Flag To Start Current Job
	SET_BIT(TWCR,7);
 5c2:	86 b7       	in	r24, 0x36	; 54
 5c4:	80 68       	ori	r24, 0x80	; 128
 5c6:	86 bf       	out	0x36, r24	; 54
	
	// Wait For Flag
	while (0==GET_BIT(TWCR,7));
 5c8:	06 b6       	in	r0, 0x36	; 54
 5ca:	07 fe       	sbrs	r0, 7
 5cc:	fd cf       	rjmp	.-6      	; 0x5c8 <TWI_sendMasterDataByte+0x8>
	
	// Check ACK == Master Transmit Data ACK
	while((TWSR & 0xF8) != 0x28);
 5ce:	81 b1       	in	r24, 0x01	; 1
 5d0:	88 7f       	andi	r24, 0xF8	; 248
 5d2:	88 32       	cpi	r24, 0x28	; 40
 5d4:	e1 f7       	brne	.-8      	; 0x5ce <TWI_sendMasterDataByte+0xe>
	
}
 5d6:	08 95       	ret

000005d8 <TWI_readMasterDataByte>:

void TWI_readMasterDataByte(u8* returnedData)
{
 5d8:	fc 01       	movw	r30, r24
	// Clear Flag To Start Current Job
	SET_BIT(TWCR,7);
 5da:	96 b7       	in	r25, 0x36	; 54
 5dc:	90 68       	ori	r25, 0x80	; 128
 5de:	96 bf       	out	0x36, r25	; 54
	
	// Wait For Flag
	while (0==GET_BIT(TWCR,7));
 5e0:	06 b6       	in	r0, 0x36	; 54
 5e2:	07 fe       	sbrs	r0, 7
 5e4:	fd cf       	rjmp	.-6      	; 0x5e0 <TWI_readMasterDataByte+0x8>
	
	// Check ACK == Master Receiced Data ACK
	while((TWSR & 0xF8) != 0x50);
 5e6:	91 b1       	in	r25, 0x01	; 1
 5e8:	98 7f       	andi	r25, 0xF8	; 248
 5ea:	90 35       	cpi	r25, 0x50	; 80
 5ec:	e1 f7       	brne	.-8      	; 0x5e6 <TWI_readMasterDataByte+0xe>
	
	// Read Data From Data Register
	*returnedData = TWDR ; 
 5ee:	83 b1       	in	r24, 0x03	; 3
 5f0:	80 83       	st	Z, r24
 5f2:	08 95       	ret

000005f4 <_exit>:
 5f4:	f8 94       	cli

000005f6 <__stop_program>:
 5f6:	ff cf       	rjmp	.-2      	; 0x5f6 <__stop_program>
