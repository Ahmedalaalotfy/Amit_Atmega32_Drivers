
STEPM_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005e6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000063a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000063a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a8  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000cab  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006f2  00000000  00000000  000013fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000077e  00000000  00000000  00001aed  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  0000226c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004a1  00000000  00000000  0000237c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000662  00000000  00000000  0000281d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00002e7f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 22 01 	call	0x244	; 0x244 <main>
  64:	0c 94 f1 02 	jmp	0x5e2	; 0x5e2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_setPinDirection>:
/* PINS APIS*/ 

void DIO_setPinDirection(u8 PortId, u8 PinId , u8 PinDirection ) 

{
 if ( (PortId<=3) && (PinId<=7) && ((PinDirection == DIO_PIN_OUTPUT ) || (PinDirection == DIO_PIN_INPUT)) )
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_setPinDirection+0x6>
  70:	72 c0       	rjmp	.+228    	; 0x156 <DIO_setPinDirection+0xea>
  72:	68 30       	cpi	r22, 0x08	; 8
  74:	08 f0       	brcs	.+2      	; 0x78 <DIO_setPinDirection+0xc>
  76:	6f c0       	rjmp	.+222    	; 0x156 <DIO_setPinDirection+0xea>
  78:	42 30       	cpi	r20, 0x02	; 2
  7a:	08 f0       	brcs	.+2      	; 0x7e <DIO_setPinDirection+0x12>
  7c:	6c c0       	rjmp	.+216    	; 0x156 <DIO_setPinDirection+0xea>
 { 
	switch (PortId)  // DIO PORTA
  7e:	81 30       	cpi	r24, 0x01	; 1
  80:	01 f1       	breq	.+64     	; 0xc2 <DIO_setPinDirection+0x56>
  82:	30 f0       	brcs	.+12     	; 0x90 <DIO_setPinDirection+0x24>
  84:	82 30       	cpi	r24, 0x02	; 2
  86:	b1 f1       	breq	.+108    	; 0xf4 <DIO_setPinDirection+0x88>
  88:	83 30       	cpi	r24, 0x03	; 3
  8a:	09 f4       	brne	.+2      	; 0x8e <DIO_setPinDirection+0x22>
  8c:	4c c0       	rjmp	.+152    	; 0x126 <DIO_setPinDirection+0xba>
  8e:	08 95       	ret
	{
		case 0 : 
		if (DIO_PIN_OUTPUT == PinDirection)
  90:	41 30       	cpi	r20, 0x01	; 1
  92:	59 f4       	brne	.+22     	; 0xaa <DIO_setPinDirection+0x3e>
		{
			SET_BIT(DDRA,PinId);
  94:	2a b3       	in	r18, 0x1a	; 26
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <DIO_setPinDirection+0x34>
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <DIO_setPinDirection+0x30>
  a4:	82 2b       	or	r24, r18
  a6:	8a bb       	out	0x1a, r24	; 26
  a8:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRA,PinId);
  aa:	2a b3       	in	r18, 0x1a	; 26
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_setPinDirection+0x4a>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_setPinDirection+0x46>
  ba:	80 95       	com	r24
  bc:	82 23       	and	r24, r18
  be:	8a bb       	out	0x1a, r24	; 26
  c0:	08 95       	ret
		}
		break ;
		
		case 1 : // DIO PORTB 
		if (DIO_PIN_OUTPUT == PinDirection)
  c2:	41 30       	cpi	r20, 0x01	; 1
  c4:	59 f4       	brne	.+22     	; 0xdc <DIO_setPinDirection+0x70>
		{
			SET_BIT(DDRB,PinId);
  c6:	27 b3       	in	r18, 0x17	; 23
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_setPinDirection+0x66>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_setPinDirection+0x62>
  d6:	82 2b       	or	r24, r18
  d8:	87 bb       	out	0x17, r24	; 23
  da:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRB,PinId);
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_setPinDirection+0x7c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_setPinDirection+0x78>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	87 bb       	out	0x17, r24	; 23
  f2:	08 95       	ret
		}
		break ;
		
		case 2 : // DIO PORTC 
		if (DIO_PIN_OUTPUT == PinDirection)
  f4:	41 30       	cpi	r20, 0x01	; 1
  f6:	59 f4       	brne	.+22     	; 0x10e <DIO_setPinDirection+0xa2>
		{
			SET_BIT(DDRC,PinId);
  f8:	24 b3       	in	r18, 0x14	; 20
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_setPinDirection+0x98>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_setPinDirection+0x94>
 108:	82 2b       	or	r24, r18
 10a:	84 bb       	out	0x14, r24	; 20
 10c:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRC,PinId);
 10e:	24 b3       	in	r18, 0x14	; 20
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_setPinDirection+0xae>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_setPinDirection+0xaa>
 11e:	80 95       	com	r24
 120:	82 23       	and	r24, r18
 122:	84 bb       	out	0x14, r24	; 20
 124:	08 95       	ret
		}
		break ;
		
		case 3 : // DIO PORTD 
		if (DIO_PIN_OUTPUT == PinDirection)
 126:	41 30       	cpi	r20, 0x01	; 1
 128:	59 f4       	brne	.+22     	; 0x140 <DIO_setPinDirection+0xd4>
		{
			SET_BIT(DDRD,PinId);
 12a:	21 b3       	in	r18, 0x11	; 17
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_setPinDirection+0xca>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_setPinDirection+0xc6>
 13a:	82 2b       	or	r24, r18
 13c:	81 bb       	out	0x11, r24	; 17
 13e:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRD,PinId);
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_setPinDirection+0xe0>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_setPinDirection+0xdc>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	81 bb       	out	0x11, r24	; 17
 156:	08 95       	ret

00000158 <DIO_setPinValue>:
}

void DIO_setPinValue(u8 PortId, u8 PinId , u8 PinValue)

{
	 if ( (PortId<=3) && (PinId<=7) && ((PinValue == DIO_PIN_HIGH ) || (PinValue == DIO_PIN_LOW)) )
 158:	84 30       	cpi	r24, 0x04	; 4
 15a:	08 f0       	brcs	.+2      	; 0x15e <DIO_setPinValue+0x6>
 15c:	72 c0       	rjmp	.+228    	; 0x242 <DIO_setPinValue+0xea>
 15e:	68 30       	cpi	r22, 0x08	; 8
 160:	08 f0       	brcs	.+2      	; 0x164 <DIO_setPinValue+0xc>
 162:	6f c0       	rjmp	.+222    	; 0x242 <DIO_setPinValue+0xea>
 164:	42 30       	cpi	r20, 0x02	; 2
 166:	08 f0       	brcs	.+2      	; 0x16a <DIO_setPinValue+0x12>
 168:	6c c0       	rjmp	.+216    	; 0x242 <DIO_setPinValue+0xea>
	 {
		 switch (PortId) 
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	01 f1       	breq	.+64     	; 0x1ae <DIO_setPinValue+0x56>
 16e:	30 f0       	brcs	.+12     	; 0x17c <DIO_setPinValue+0x24>
 170:	82 30       	cpi	r24, 0x02	; 2
 172:	b1 f1       	breq	.+108    	; 0x1e0 <DIO_setPinValue+0x88>
 174:	83 30       	cpi	r24, 0x03	; 3
 176:	09 f4       	brne	.+2      	; 0x17a <DIO_setPinValue+0x22>
 178:	4c c0       	rjmp	.+152    	; 0x212 <DIO_setPinValue+0xba>
 17a:	08 95       	ret
		 {
			 case 0 : // DIO_PORTA
			 if (DIO_PIN_HIGH==PinValue)
 17c:	41 30       	cpi	r20, 0x01	; 1
 17e:	59 f4       	brne	.+22     	; 0x196 <DIO_setPinValue+0x3e>
			 {
			    SET_BIT(PORTA,PinId);
 180:	2b b3       	in	r18, 0x1b	; 27
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_setPinValue+0x34>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_setPinValue+0x30>
 190:	82 2b       	or	r24, r18
 192:	8b bb       	out	0x1b, r24	; 27
 194:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTA,PinId) ; 
 196:	2b b3       	in	r18, 0x1b	; 27
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_setPinValue+0x4a>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_setPinValue+0x46>
 1a6:	80 95       	com	r24
 1a8:	82 23       	and	r24, r18
 1aa:	8b bb       	out	0x1b, r24	; 27
 1ac:	08 95       	ret
			 }
			 break ; 
			 
			 case 1 : // DIO_PORTB
			 if (DIO_PIN_HIGH==PinValue)
 1ae:	41 30       	cpi	r20, 0x01	; 1
 1b0:	59 f4       	brne	.+22     	; 0x1c8 <DIO_setPinValue+0x70>
			 {
			    SET_BIT(PORTB,PinId);
 1b2:	28 b3       	in	r18, 0x18	; 24
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_setPinValue+0x66>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_setPinValue+0x62>
 1c2:	82 2b       	or	r24, r18
 1c4:	88 bb       	out	0x18, r24	; 24
 1c6:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTB,PinId) ; 
 1c8:	28 b3       	in	r18, 0x18	; 24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_setPinValue+0x7c>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_setPinValue+0x78>
 1d8:	80 95       	com	r24
 1da:	82 23       	and	r24, r18
 1dc:	88 bb       	out	0x18, r24	; 24
 1de:	08 95       	ret
			 }
			 break ; 
			 
			 case 2 : // DIO_PORTC
			 if (DIO_PIN_HIGH==PinValue)
 1e0:	41 30       	cpi	r20, 0x01	; 1
 1e2:	59 f4       	brne	.+22     	; 0x1fa <DIO_setPinValue+0xa2>
			 {
			    SET_BIT(PORTC,PinId);
 1e4:	25 b3       	in	r18, 0x15	; 21
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_setPinValue+0x98>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_setPinValue+0x94>
 1f4:	82 2b       	or	r24, r18
 1f6:	85 bb       	out	0x15, r24	; 21
 1f8:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTC,PinId) ; 
 1fa:	25 b3       	in	r18, 0x15	; 21
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_setPinValue+0xae>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_setPinValue+0xaa>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	85 bb       	out	0x15, r24	; 21
 210:	08 95       	ret
			 }
			 break ; 
			 
			 case 3 : // DIO_PORTD
			 if (DIO_PIN_HIGH==PinValue)
 212:	41 30       	cpi	r20, 0x01	; 1
 214:	59 f4       	brne	.+22     	; 0x22c <DIO_setPinValue+0xd4>
			 {
			    SET_BIT(PORTD,PinId);
 216:	22 b3       	in	r18, 0x12	; 18
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_setPinValue+0xca>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_setPinValue+0xc6>
 226:	82 2b       	or	r24, r18
 228:	82 bb       	out	0x12, r24	; 18
 22a:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTD,PinId) ; 
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_setPinValue+0xe0>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_setPinValue+0xdc>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	82 bb       	out	0x12, r24	; 18
 242:	08 95       	ret

00000244 <main>:
	DIO_setPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_OUTPUT);
	DIO_setPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT);
	DIO_setPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_OUTPUT);
    u16 counter ; */
	
	STEPM_on(180); 
 244:	84 eb       	ldi	r24, 0xB4	; 180
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	0e 94 27 01 	call	0x24e	; 0x24e <STEPM_on>
 24c:	ff cf       	rjmp	.-2      	; 0x24c <main+0x8>

0000024e <STEPM_on>:

/* HAL */
#include "STEPM_interface.h"

void STEPM_on(u16 Degree)
{
 24e:	0f 93       	push	r16
 250:	1f 93       	push	r17
 252:	cf 93       	push	r28
 254:	df 93       	push	r29
	u16 counter ; 
	u16 rotationValue ;
	
	rotationValue = (Degree)/(0.175*4);
 256:	bc 01       	movw	r22, r24
 258:	80 e0       	ldi	r24, 0x00	; 0
 25a:	90 e0       	ldi	r25, 0x00	; 0
 25c:	0e 94 63 02 	call	0x4c6	; 0x4c6 <__floatunsisf>
 260:	23 e3       	ldi	r18, 0x33	; 51
 262:	33 e3       	ldi	r19, 0x33	; 51
 264:	43 e3       	ldi	r20, 0x33	; 51
 266:	5f e3       	ldi	r21, 0x3F	; 63
 268:	0e 94 c2 01 	call	0x384	; 0x384 <__divsf3>
 26c:	0e 94 34 02 	call	0x468	; 0x468 <__fixunssfsi>
 270:	8b 01       	movw	r16, r22
	
	DIO_setPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_OUTPUT);
 272:	41 e0       	ldi	r20, 0x01	; 1
 274:	64 e0       	ldi	r22, 0x04	; 4
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_OUTPUT);
 27c:	41 e0       	ldi	r20, 0x01	; 1
 27e:	65 e0       	ldi	r22, 0x05	; 5
 280:	80 e0       	ldi	r24, 0x00	; 0
 282:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT);
 286:	41 e0       	ldi	r20, 0x01	; 1
 288:	66 e0       	ldi	r22, 0x06	; 6
 28a:	80 e0       	ldi	r24, 0x00	; 0
 28c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_OUTPUT);
 290:	41 e0       	ldi	r20, 0x01	; 1
 292:	67 e0       	ldi	r22, 0x07	; 7
 294:	80 e0       	ldi	r24, 0x00	; 0
 296:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
	
	for (counter = 0 ; counter < rotationValue ; counter ++ )
 29a:	c0 e0       	ldi	r28, 0x00	; 0
 29c:	d0 e0       	ldi	r29, 0x00	; 0
 29e:	69 c0       	rjmp	.+210    	; 0x372 <STEPM_on+0x124>
	{
		// step 1
		DIO_setPinValue(DIO_PORTA,DIO_PIN4,DIO_PIN_LOW);
 2a0:	40 e0       	ldi	r20, 0x00	; 0
 2a2:	64 e0       	ldi	r22, 0x04	; 4
 2a4:	80 e0       	ldi	r24, 0x00	; 0
 2a6:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTA,DIO_PIN5,DIO_PIN_HIGH);
 2aa:	41 e0       	ldi	r20, 0x01	; 1
 2ac:	65 e0       	ldi	r22, 0x05	; 5
 2ae:	80 e0       	ldi	r24, 0x00	; 0
 2b0:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTA,DIO_PIN6,DIO_PIN_HIGH);
 2b4:	41 e0       	ldi	r20, 0x01	; 1
 2b6:	66 e0       	ldi	r22, 0x06	; 6
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTA,DIO_PIN7,DIO_PIN_HIGH);
 2be:	41 e0       	ldi	r20, 0x01	; 1
 2c0:	67 e0       	ldi	r22, 0x07	; 7
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2c8:	8f e3       	ldi	r24, 0x3F	; 63
 2ca:	9c e9       	ldi	r25, 0x9C	; 156
 2cc:	01 97       	sbiw	r24, 0x01	; 1
 2ce:	f1 f7       	brne	.-4      	; 0x2cc <STEPM_on+0x7e>
 2d0:	00 c0       	rjmp	.+0      	; 0x2d2 <STEPM_on+0x84>
 2d2:	00 00       	nop
		_delay_ms(10);
		
		// step 2
		DIO_setPinValue(DIO_PORTA,DIO_PIN4,DIO_PIN_HIGH);
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	64 e0       	ldi	r22, 0x04	; 4
 2d8:	80 e0       	ldi	r24, 0x00	; 0
 2da:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTA,DIO_PIN5,DIO_PIN_LOW);
 2de:	40 e0       	ldi	r20, 0x00	; 0
 2e0:	65 e0       	ldi	r22, 0x05	; 5
 2e2:	80 e0       	ldi	r24, 0x00	; 0
 2e4:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTA,DIO_PIN6,DIO_PIN_HIGH);
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	66 e0       	ldi	r22, 0x06	; 6
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTA,DIO_PIN7,DIO_PIN_HIGH);
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	67 e0       	ldi	r22, 0x07	; 7
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 2fc:	8f e3       	ldi	r24, 0x3F	; 63
 2fe:	9c e9       	ldi	r25, 0x9C	; 156
 300:	01 97       	sbiw	r24, 0x01	; 1
 302:	f1 f7       	brne	.-4      	; 0x300 <STEPM_on+0xb2>
 304:	00 c0       	rjmp	.+0      	; 0x306 <STEPM_on+0xb8>
 306:	00 00       	nop
		_delay_ms(10);
		
		// step 3
		DIO_setPinValue(DIO_PORTA,DIO_PIN4,DIO_PIN_HIGH);
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	64 e0       	ldi	r22, 0x04	; 4
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTA,DIO_PIN5,DIO_PIN_HIGH);
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	65 e0       	ldi	r22, 0x05	; 5
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTA,DIO_PIN6,DIO_PIN_LOW);
 31c:	40 e0       	ldi	r20, 0x00	; 0
 31e:	66 e0       	ldi	r22, 0x06	; 6
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTA,DIO_PIN7,DIO_PIN_HIGH);
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	67 e0       	ldi	r22, 0x07	; 7
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 330:	8f e3       	ldi	r24, 0x3F	; 63
 332:	9c e9       	ldi	r25, 0x9C	; 156
 334:	01 97       	sbiw	r24, 0x01	; 1
 336:	f1 f7       	brne	.-4      	; 0x334 <STEPM_on+0xe6>
 338:	00 c0       	rjmp	.+0      	; 0x33a <STEPM_on+0xec>
 33a:	00 00       	nop
		_delay_ms(10);
		
		// step 4
		DIO_setPinValue(DIO_PORTA,DIO_PIN4,DIO_PIN_HIGH);
 33c:	41 e0       	ldi	r20, 0x01	; 1
 33e:	64 e0       	ldi	r22, 0x04	; 4
 340:	80 e0       	ldi	r24, 0x00	; 0
 342:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTA,DIO_PIN5,DIO_PIN_HIGH);
 346:	41 e0       	ldi	r20, 0x01	; 1
 348:	65 e0       	ldi	r22, 0x05	; 5
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTA,DIO_PIN6,DIO_PIN_HIGH);
 350:	41 e0       	ldi	r20, 0x01	; 1
 352:	66 e0       	ldi	r22, 0x06	; 6
 354:	80 e0       	ldi	r24, 0x00	; 0
 356:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
		DIO_setPinValue(DIO_PORTA,DIO_PIN7,DIO_PIN_LOW);
 35a:	40 e0       	ldi	r20, 0x00	; 0
 35c:	67 e0       	ldi	r22, 0x07	; 7
 35e:	80 e0       	ldi	r24, 0x00	; 0
 360:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 364:	8f e3       	ldi	r24, 0x3F	; 63
 366:	9c e9       	ldi	r25, 0x9C	; 156
 368:	01 97       	sbiw	r24, 0x01	; 1
 36a:	f1 f7       	brne	.-4      	; 0x368 <STEPM_on+0x11a>
 36c:	00 c0       	rjmp	.+0      	; 0x36e <STEPM_on+0x120>
 36e:	00 00       	nop
	DIO_setPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_OUTPUT);
	DIO_setPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_OUTPUT);
	DIO_setPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT);
	DIO_setPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_OUTPUT);
	
	for (counter = 0 ; counter < rotationValue ; counter ++ )
 370:	21 96       	adiw	r28, 0x01	; 1
 372:	c0 17       	cp	r28, r16
 374:	d1 07       	cpc	r29, r17
 376:	08 f4       	brcc	.+2      	; 0x37a <STEPM_on+0x12c>
 378:	93 cf       	rjmp	.-218    	; 0x2a0 <STEPM_on+0x52>
		DIO_setPinValue(DIO_PORTA,DIO_PIN5,DIO_PIN_HIGH);
		DIO_setPinValue(DIO_PORTA,DIO_PIN6,DIO_PIN_HIGH);
		DIO_setPinValue(DIO_PORTA,DIO_PIN7,DIO_PIN_LOW);
		_delay_ms(10);
	}
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	08 95       	ret

00000384 <__divsf3>:
 384:	0e 94 d6 01 	call	0x3ac	; 0x3ac <__divsf3x>
 388:	0c 94 b7 02 	jmp	0x56e	; 0x56e <__fp_round>
 38c:	0e 94 b0 02 	call	0x560	; 0x560 <__fp_pscB>
 390:	58 f0       	brcs	.+22     	; 0x3a8 <__divsf3+0x24>
 392:	0e 94 a9 02 	call	0x552	; 0x552 <__fp_pscA>
 396:	40 f0       	brcs	.+16     	; 0x3a8 <__divsf3+0x24>
 398:	29 f4       	brne	.+10     	; 0x3a4 <__divsf3+0x20>
 39a:	5f 3f       	cpi	r21, 0xFF	; 255
 39c:	29 f0       	breq	.+10     	; 0x3a8 <__divsf3+0x24>
 39e:	0c 94 a0 02 	jmp	0x540	; 0x540 <__fp_inf>
 3a2:	51 11       	cpse	r21, r1
 3a4:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__fp_szero>
 3a8:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__fp_nan>

000003ac <__divsf3x>:
 3ac:	0e 94 c8 02 	call	0x590	; 0x590 <__fp_split3>
 3b0:	68 f3       	brcs	.-38     	; 0x38c <__divsf3+0x8>

000003b2 <__divsf3_pse>:
 3b2:	99 23       	and	r25, r25
 3b4:	b1 f3       	breq	.-20     	; 0x3a2 <__divsf3+0x1e>
 3b6:	55 23       	and	r21, r21
 3b8:	91 f3       	breq	.-28     	; 0x39e <__divsf3+0x1a>
 3ba:	95 1b       	sub	r25, r21
 3bc:	55 0b       	sbc	r21, r21
 3be:	bb 27       	eor	r27, r27
 3c0:	aa 27       	eor	r26, r26
 3c2:	62 17       	cp	r22, r18
 3c4:	73 07       	cpc	r23, r19
 3c6:	84 07       	cpc	r24, r20
 3c8:	38 f0       	brcs	.+14     	; 0x3d8 <__divsf3_pse+0x26>
 3ca:	9f 5f       	subi	r25, 0xFF	; 255
 3cc:	5f 4f       	sbci	r21, 0xFF	; 255
 3ce:	22 0f       	add	r18, r18
 3d0:	33 1f       	adc	r19, r19
 3d2:	44 1f       	adc	r20, r20
 3d4:	aa 1f       	adc	r26, r26
 3d6:	a9 f3       	breq	.-22     	; 0x3c2 <__divsf3_pse+0x10>
 3d8:	35 d0       	rcall	.+106    	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 3da:	0e 2e       	mov	r0, r30
 3dc:	3a f0       	brmi	.+14     	; 0x3ec <__divsf3_pse+0x3a>
 3de:	e0 e8       	ldi	r30, 0x80	; 128
 3e0:	32 d0       	rcall	.+100    	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 3e2:	91 50       	subi	r25, 0x01	; 1
 3e4:	50 40       	sbci	r21, 0x00	; 0
 3e6:	e6 95       	lsr	r30
 3e8:	00 1c       	adc	r0, r0
 3ea:	ca f7       	brpl	.-14     	; 0x3de <__divsf3_pse+0x2c>
 3ec:	2b d0       	rcall	.+86     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 3ee:	fe 2f       	mov	r31, r30
 3f0:	29 d0       	rcall	.+82     	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 3f2:	66 0f       	add	r22, r22
 3f4:	77 1f       	adc	r23, r23
 3f6:	88 1f       	adc	r24, r24
 3f8:	bb 1f       	adc	r27, r27
 3fa:	26 17       	cp	r18, r22
 3fc:	37 07       	cpc	r19, r23
 3fe:	48 07       	cpc	r20, r24
 400:	ab 07       	cpc	r26, r27
 402:	b0 e8       	ldi	r27, 0x80	; 128
 404:	09 f0       	breq	.+2      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 406:	bb 0b       	sbc	r27, r27
 408:	80 2d       	mov	r24, r0
 40a:	bf 01       	movw	r22, r30
 40c:	ff 27       	eor	r31, r31
 40e:	93 58       	subi	r25, 0x83	; 131
 410:	5f 4f       	sbci	r21, 0xFF	; 255
 412:	3a f0       	brmi	.+14     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 414:	9e 3f       	cpi	r25, 0xFE	; 254
 416:	51 05       	cpc	r21, r1
 418:	78 f0       	brcs	.+30     	; 0x438 <__EEPROM_REGION_LENGTH__+0x38>
 41a:	0c 94 a0 02 	jmp	0x540	; 0x540 <__fp_inf>
 41e:	0c 94 eb 02 	jmp	0x5d6	; 0x5d6 <__fp_szero>
 422:	5f 3f       	cpi	r21, 0xFF	; 255
 424:	e4 f3       	brlt	.-8      	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 426:	98 3e       	cpi	r25, 0xE8	; 232
 428:	d4 f3       	brlt	.-12     	; 0x41e <__EEPROM_REGION_LENGTH__+0x1e>
 42a:	86 95       	lsr	r24
 42c:	77 95       	ror	r23
 42e:	67 95       	ror	r22
 430:	b7 95       	ror	r27
 432:	f7 95       	ror	r31
 434:	9f 5f       	subi	r25, 0xFF	; 255
 436:	c9 f7       	brne	.-14     	; 0x42a <__EEPROM_REGION_LENGTH__+0x2a>
 438:	88 0f       	add	r24, r24
 43a:	91 1d       	adc	r25, r1
 43c:	96 95       	lsr	r25
 43e:	87 95       	ror	r24
 440:	97 f9       	bld	r25, 7
 442:	08 95       	ret
 444:	e1 e0       	ldi	r30, 0x01	; 1
 446:	66 0f       	add	r22, r22
 448:	77 1f       	adc	r23, r23
 44a:	88 1f       	adc	r24, r24
 44c:	bb 1f       	adc	r27, r27
 44e:	62 17       	cp	r22, r18
 450:	73 07       	cpc	r23, r19
 452:	84 07       	cpc	r24, r20
 454:	ba 07       	cpc	r27, r26
 456:	20 f0       	brcs	.+8      	; 0x460 <__EEPROM_REGION_LENGTH__+0x60>
 458:	62 1b       	sub	r22, r18
 45a:	73 0b       	sbc	r23, r19
 45c:	84 0b       	sbc	r24, r20
 45e:	ba 0b       	sbc	r27, r26
 460:	ee 1f       	adc	r30, r30
 462:	88 f7       	brcc	.-30     	; 0x446 <__EEPROM_REGION_LENGTH__+0x46>
 464:	e0 95       	com	r30
 466:	08 95       	ret

00000468 <__fixunssfsi>:
 468:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <__fp_splitA>
 46c:	88 f0       	brcs	.+34     	; 0x490 <__fixunssfsi+0x28>
 46e:	9f 57       	subi	r25, 0x7F	; 127
 470:	98 f0       	brcs	.+38     	; 0x498 <__fixunssfsi+0x30>
 472:	b9 2f       	mov	r27, r25
 474:	99 27       	eor	r25, r25
 476:	b7 51       	subi	r27, 0x17	; 23
 478:	b0 f0       	brcs	.+44     	; 0x4a6 <__fixunssfsi+0x3e>
 47a:	e1 f0       	breq	.+56     	; 0x4b4 <__fixunssfsi+0x4c>
 47c:	66 0f       	add	r22, r22
 47e:	77 1f       	adc	r23, r23
 480:	88 1f       	adc	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	1a f0       	brmi	.+6      	; 0x48c <__fixunssfsi+0x24>
 486:	ba 95       	dec	r27
 488:	c9 f7       	brne	.-14     	; 0x47c <__fixunssfsi+0x14>
 48a:	14 c0       	rjmp	.+40     	; 0x4b4 <__fixunssfsi+0x4c>
 48c:	b1 30       	cpi	r27, 0x01	; 1
 48e:	91 f0       	breq	.+36     	; 0x4b4 <__fixunssfsi+0x4c>
 490:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <__fp_zero>
 494:	b1 e0       	ldi	r27, 0x01	; 1
 496:	08 95       	ret
 498:	0c 94 ea 02 	jmp	0x5d4	; 0x5d4 <__fp_zero>
 49c:	67 2f       	mov	r22, r23
 49e:	78 2f       	mov	r23, r24
 4a0:	88 27       	eor	r24, r24
 4a2:	b8 5f       	subi	r27, 0xF8	; 248
 4a4:	39 f0       	breq	.+14     	; 0x4b4 <__fixunssfsi+0x4c>
 4a6:	b9 3f       	cpi	r27, 0xF9	; 249
 4a8:	cc f3       	brlt	.-14     	; 0x49c <__fixunssfsi+0x34>
 4aa:	86 95       	lsr	r24
 4ac:	77 95       	ror	r23
 4ae:	67 95       	ror	r22
 4b0:	b3 95       	inc	r27
 4b2:	d9 f7       	brne	.-10     	; 0x4aa <__fixunssfsi+0x42>
 4b4:	3e f4       	brtc	.+14     	; 0x4c4 <__fixunssfsi+0x5c>
 4b6:	90 95       	com	r25
 4b8:	80 95       	com	r24
 4ba:	70 95       	com	r23
 4bc:	61 95       	neg	r22
 4be:	7f 4f       	sbci	r23, 0xFF	; 255
 4c0:	8f 4f       	sbci	r24, 0xFF	; 255
 4c2:	9f 4f       	sbci	r25, 0xFF	; 255
 4c4:	08 95       	ret

000004c6 <__floatunsisf>:
 4c6:	e8 94       	clt
 4c8:	09 c0       	rjmp	.+18     	; 0x4dc <__floatsisf+0x12>

000004ca <__floatsisf>:
 4ca:	97 fb       	bst	r25, 7
 4cc:	3e f4       	brtc	.+14     	; 0x4dc <__floatsisf+0x12>
 4ce:	90 95       	com	r25
 4d0:	80 95       	com	r24
 4d2:	70 95       	com	r23
 4d4:	61 95       	neg	r22
 4d6:	7f 4f       	sbci	r23, 0xFF	; 255
 4d8:	8f 4f       	sbci	r24, 0xFF	; 255
 4da:	9f 4f       	sbci	r25, 0xFF	; 255
 4dc:	99 23       	and	r25, r25
 4de:	a9 f0       	breq	.+42     	; 0x50a <__floatsisf+0x40>
 4e0:	f9 2f       	mov	r31, r25
 4e2:	96 e9       	ldi	r25, 0x96	; 150
 4e4:	bb 27       	eor	r27, r27
 4e6:	93 95       	inc	r25
 4e8:	f6 95       	lsr	r31
 4ea:	87 95       	ror	r24
 4ec:	77 95       	ror	r23
 4ee:	67 95       	ror	r22
 4f0:	b7 95       	ror	r27
 4f2:	f1 11       	cpse	r31, r1
 4f4:	f8 cf       	rjmp	.-16     	; 0x4e6 <__floatsisf+0x1c>
 4f6:	fa f4       	brpl	.+62     	; 0x536 <__floatsisf+0x6c>
 4f8:	bb 0f       	add	r27, r27
 4fa:	11 f4       	brne	.+4      	; 0x500 <__floatsisf+0x36>
 4fc:	60 ff       	sbrs	r22, 0
 4fe:	1b c0       	rjmp	.+54     	; 0x536 <__floatsisf+0x6c>
 500:	6f 5f       	subi	r22, 0xFF	; 255
 502:	7f 4f       	sbci	r23, 0xFF	; 255
 504:	8f 4f       	sbci	r24, 0xFF	; 255
 506:	9f 4f       	sbci	r25, 0xFF	; 255
 508:	16 c0       	rjmp	.+44     	; 0x536 <__floatsisf+0x6c>
 50a:	88 23       	and	r24, r24
 50c:	11 f0       	breq	.+4      	; 0x512 <__floatsisf+0x48>
 50e:	96 e9       	ldi	r25, 0x96	; 150
 510:	11 c0       	rjmp	.+34     	; 0x534 <__floatsisf+0x6a>
 512:	77 23       	and	r23, r23
 514:	21 f0       	breq	.+8      	; 0x51e <__floatsisf+0x54>
 516:	9e e8       	ldi	r25, 0x8E	; 142
 518:	87 2f       	mov	r24, r23
 51a:	76 2f       	mov	r23, r22
 51c:	05 c0       	rjmp	.+10     	; 0x528 <__floatsisf+0x5e>
 51e:	66 23       	and	r22, r22
 520:	71 f0       	breq	.+28     	; 0x53e <__floatsisf+0x74>
 522:	96 e8       	ldi	r25, 0x86	; 134
 524:	86 2f       	mov	r24, r22
 526:	70 e0       	ldi	r23, 0x00	; 0
 528:	60 e0       	ldi	r22, 0x00	; 0
 52a:	2a f0       	brmi	.+10     	; 0x536 <__floatsisf+0x6c>
 52c:	9a 95       	dec	r25
 52e:	66 0f       	add	r22, r22
 530:	77 1f       	adc	r23, r23
 532:	88 1f       	adc	r24, r24
 534:	da f7       	brpl	.-10     	; 0x52c <__floatsisf+0x62>
 536:	88 0f       	add	r24, r24
 538:	96 95       	lsr	r25
 53a:	87 95       	ror	r24
 53c:	97 f9       	bld	r25, 7
 53e:	08 95       	ret

00000540 <__fp_inf>:
 540:	97 f9       	bld	r25, 7
 542:	9f 67       	ori	r25, 0x7F	; 127
 544:	80 e8       	ldi	r24, 0x80	; 128
 546:	70 e0       	ldi	r23, 0x00	; 0
 548:	60 e0       	ldi	r22, 0x00	; 0
 54a:	08 95       	ret

0000054c <__fp_nan>:
 54c:	9f ef       	ldi	r25, 0xFF	; 255
 54e:	80 ec       	ldi	r24, 0xC0	; 192
 550:	08 95       	ret

00000552 <__fp_pscA>:
 552:	00 24       	eor	r0, r0
 554:	0a 94       	dec	r0
 556:	16 16       	cp	r1, r22
 558:	17 06       	cpc	r1, r23
 55a:	18 06       	cpc	r1, r24
 55c:	09 06       	cpc	r0, r25
 55e:	08 95       	ret

00000560 <__fp_pscB>:
 560:	00 24       	eor	r0, r0
 562:	0a 94       	dec	r0
 564:	12 16       	cp	r1, r18
 566:	13 06       	cpc	r1, r19
 568:	14 06       	cpc	r1, r20
 56a:	05 06       	cpc	r0, r21
 56c:	08 95       	ret

0000056e <__fp_round>:
 56e:	09 2e       	mov	r0, r25
 570:	03 94       	inc	r0
 572:	00 0c       	add	r0, r0
 574:	11 f4       	brne	.+4      	; 0x57a <__fp_round+0xc>
 576:	88 23       	and	r24, r24
 578:	52 f0       	brmi	.+20     	; 0x58e <__fp_round+0x20>
 57a:	bb 0f       	add	r27, r27
 57c:	40 f4       	brcc	.+16     	; 0x58e <__fp_round+0x20>
 57e:	bf 2b       	or	r27, r31
 580:	11 f4       	brne	.+4      	; 0x586 <__fp_round+0x18>
 582:	60 ff       	sbrs	r22, 0
 584:	04 c0       	rjmp	.+8      	; 0x58e <__fp_round+0x20>
 586:	6f 5f       	subi	r22, 0xFF	; 255
 588:	7f 4f       	sbci	r23, 0xFF	; 255
 58a:	8f 4f       	sbci	r24, 0xFF	; 255
 58c:	9f 4f       	sbci	r25, 0xFF	; 255
 58e:	08 95       	ret

00000590 <__fp_split3>:
 590:	57 fd       	sbrc	r21, 7
 592:	90 58       	subi	r25, 0x80	; 128
 594:	44 0f       	add	r20, r20
 596:	55 1f       	adc	r21, r21
 598:	59 f0       	breq	.+22     	; 0x5b0 <__fp_splitA+0x10>
 59a:	5f 3f       	cpi	r21, 0xFF	; 255
 59c:	71 f0       	breq	.+28     	; 0x5ba <__fp_splitA+0x1a>
 59e:	47 95       	ror	r20

000005a0 <__fp_splitA>:
 5a0:	88 0f       	add	r24, r24
 5a2:	97 fb       	bst	r25, 7
 5a4:	99 1f       	adc	r25, r25
 5a6:	61 f0       	breq	.+24     	; 0x5c0 <__fp_splitA+0x20>
 5a8:	9f 3f       	cpi	r25, 0xFF	; 255
 5aa:	79 f0       	breq	.+30     	; 0x5ca <__fp_splitA+0x2a>
 5ac:	87 95       	ror	r24
 5ae:	08 95       	ret
 5b0:	12 16       	cp	r1, r18
 5b2:	13 06       	cpc	r1, r19
 5b4:	14 06       	cpc	r1, r20
 5b6:	55 1f       	adc	r21, r21
 5b8:	f2 cf       	rjmp	.-28     	; 0x59e <__fp_split3+0xe>
 5ba:	46 95       	lsr	r20
 5bc:	f1 df       	rcall	.-30     	; 0x5a0 <__fp_splitA>
 5be:	08 c0       	rjmp	.+16     	; 0x5d0 <__fp_splitA+0x30>
 5c0:	16 16       	cp	r1, r22
 5c2:	17 06       	cpc	r1, r23
 5c4:	18 06       	cpc	r1, r24
 5c6:	99 1f       	adc	r25, r25
 5c8:	f1 cf       	rjmp	.-30     	; 0x5ac <__fp_splitA+0xc>
 5ca:	86 95       	lsr	r24
 5cc:	71 05       	cpc	r23, r1
 5ce:	61 05       	cpc	r22, r1
 5d0:	08 94       	sec
 5d2:	08 95       	ret

000005d4 <__fp_zero>:
 5d4:	e8 94       	clt

000005d6 <__fp_szero>:
 5d6:	bb 27       	eor	r27, r27
 5d8:	66 27       	eor	r22, r22
 5da:	77 27       	eor	r23, r23
 5dc:	cb 01       	movw	r24, r22
 5de:	97 f9       	bld	r25, 7
 5e0:	08 95       	ret

000005e2 <_exit>:
 5e2:	f8 94       	cli

000005e4 <__stop_program>:
 5e4:	ff cf       	rjmp	.-2      	; 0x5e4 <__stop_program>
