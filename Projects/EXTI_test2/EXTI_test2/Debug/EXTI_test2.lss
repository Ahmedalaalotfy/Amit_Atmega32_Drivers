
EXTI_test2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000740  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000020  00800060  00000740  000007d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800080  00800080  000007f4  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007f4  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000824  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000860  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001624  00000000  00000000  000009d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000088c  00000000  00000000  00001ff4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c15  00000000  00000000  00002880  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000374  00000000  00000000  00003498  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000060a  00000000  00000000  0000380c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f3c  00000000  00000000  00003e16  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00004d52  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 d8 01 	jmp	0x3b0	; 0x3b0 <__vector_1>
   8:	0c 94 01 02 	jmp	0x402	; 0x402 <__vector_2>
   c:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 38       	cpi	r26, 0x80	; 128
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e8       	ldi	r26, 0x80	; 128
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 38       	cpi	r26, 0x86	; 134
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 65 03 	call	0x6ca	; 0x6ca <main>
  8a:	0c 94 9e 03 	jmp	0x73c	; 0x73c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_setPinDirection>:
			{
			*PinValue = DIO_PIN_HIGH ;
			}
			else 
			{
			*PinValue = DIO_PIN_LOW ; 
  92:	84 30       	cpi	r24, 0x04	; 4
  94:	08 f0       	brcs	.+2      	; 0x98 <DIO_setPinDirection+0x6>
  96:	72 c0       	rjmp	.+228    	; 0x17c <DIO_setPinDirection+0xea>
  98:	68 30       	cpi	r22, 0x08	; 8
  9a:	08 f0       	brcs	.+2      	; 0x9e <DIO_setPinDirection+0xc>
  9c:	6f c0       	rjmp	.+222    	; 0x17c <DIO_setPinDirection+0xea>
  9e:	42 30       	cpi	r20, 0x02	; 2
  a0:	08 f0       	brcs	.+2      	; 0xa4 <DIO_setPinDirection+0x12>
  a2:	6c c0       	rjmp	.+216    	; 0x17c <DIO_setPinDirection+0xea>
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	01 f1       	breq	.+64     	; 0xe8 <DIO_setPinDirection+0x56>
  a8:	30 f0       	brcs	.+12     	; 0xb6 <DIO_setPinDirection+0x24>
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	b1 f1       	breq	.+108    	; 0x11a <DIO_setPinDirection+0x88>
  ae:	83 30       	cpi	r24, 0x03	; 3
  b0:	09 f4       	brne	.+2      	; 0xb4 <DIO_setPinDirection+0x22>
  b2:	4c c0       	rjmp	.+152    	; 0x14c <DIO_setPinDirection+0xba>
  b4:	08 95       	ret
  b6:	41 30       	cpi	r20, 0x01	; 1
  b8:	59 f4       	brne	.+22     	; 0xd0 <DIO_setPinDirection+0x3e>
  ba:	2a b3       	in	r18, 0x1a	; 26
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_setPinDirection+0x34>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_setPinDirection+0x30>
  ca:	82 2b       	or	r24, r18
  cc:	8a bb       	out	0x1a, r24	; 26
  ce:	08 95       	ret
  d0:	2a b3       	in	r18, 0x1a	; 26
  d2:	81 e0       	ldi	r24, 0x01	; 1
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_setPinDirection+0x4a>
  d8:	88 0f       	add	r24, r24
  da:	99 1f       	adc	r25, r25
  dc:	6a 95       	dec	r22
  de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_setPinDirection+0x46>
  e0:	80 95       	com	r24
  e2:	82 23       	and	r24, r18
  e4:	8a bb       	out	0x1a, r24	; 26
  e6:	08 95       	ret
  e8:	41 30       	cpi	r20, 0x01	; 1
  ea:	59 f4       	brne	.+22     	; 0x102 <DIO_setPinDirection+0x70>
  ec:	27 b3       	in	r18, 0x17	; 23
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_setPinDirection+0x66>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_setPinDirection+0x62>
  fc:	82 2b       	or	r24, r18
  fe:	87 bb       	out	0x17, r24	; 23
 100:	08 95       	ret
 102:	27 b3       	in	r18, 0x17	; 23
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	02 c0       	rjmp	.+4      	; 0x10e <DIO_setPinDirection+0x7c>
 10a:	88 0f       	add	r24, r24
 10c:	99 1f       	adc	r25, r25
 10e:	6a 95       	dec	r22
 110:	e2 f7       	brpl	.-8      	; 0x10a <DIO_setPinDirection+0x78>
 112:	80 95       	com	r24
 114:	82 23       	and	r24, r18
 116:	87 bb       	out	0x17, r24	; 23
 118:	08 95       	ret
 11a:	41 30       	cpi	r20, 0x01	; 1
 11c:	59 f4       	brne	.+22     	; 0x134 <DIO_setPinDirection+0xa2>
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_setPinDirection+0x98>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_setPinDirection+0x94>
 12e:	82 2b       	or	r24, r18
 130:	84 bb       	out	0x14, r24	; 20
 132:	08 95       	ret
 134:	24 b3       	in	r18, 0x14	; 20
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_setPinDirection+0xae>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_setPinDirection+0xaa>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	84 bb       	out	0x14, r24	; 20
 14a:	08 95       	ret
 14c:	41 30       	cpi	r20, 0x01	; 1
 14e:	59 f4       	brne	.+22     	; 0x166 <DIO_setPinDirection+0xd4>
 150:	21 b3       	in	r18, 0x11	; 17
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_setPinDirection+0xca>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_setPinDirection+0xc6>
 160:	82 2b       	or	r24, r18
 162:	81 bb       	out	0x11, r24	; 17
 164:	08 95       	ret
 166:	21 b3       	in	r18, 0x11	; 17
 168:	81 e0       	ldi	r24, 0x01	; 1
 16a:	90 e0       	ldi	r25, 0x00	; 0
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_setPinDirection+0xe0>
 16e:	88 0f       	add	r24, r24
 170:	99 1f       	adc	r25, r25
 172:	6a 95       	dec	r22
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_setPinDirection+0xdc>
 176:	80 95       	com	r24
 178:	82 23       	and	r24, r18
 17a:	81 bb       	out	0x11, r24	; 17
 17c:	08 95       	ret

0000017e <DIO_setPinValue>:
 17e:	84 30       	cpi	r24, 0x04	; 4
 180:	08 f0       	brcs	.+2      	; 0x184 <DIO_setPinValue+0x6>
 182:	72 c0       	rjmp	.+228    	; 0x268 <DIO_setPinValue+0xea>
 184:	68 30       	cpi	r22, 0x08	; 8
 186:	08 f0       	brcs	.+2      	; 0x18a <DIO_setPinValue+0xc>
 188:	6f c0       	rjmp	.+222    	; 0x268 <DIO_setPinValue+0xea>
 18a:	42 30       	cpi	r20, 0x02	; 2
 18c:	08 f0       	brcs	.+2      	; 0x190 <DIO_setPinValue+0x12>
 18e:	6c c0       	rjmp	.+216    	; 0x268 <DIO_setPinValue+0xea>
 190:	81 30       	cpi	r24, 0x01	; 1
 192:	01 f1       	breq	.+64     	; 0x1d4 <DIO_setPinValue+0x56>
 194:	30 f0       	brcs	.+12     	; 0x1a2 <DIO_setPinValue+0x24>
 196:	82 30       	cpi	r24, 0x02	; 2
 198:	b1 f1       	breq	.+108    	; 0x206 <DIO_setPinValue+0x88>
 19a:	83 30       	cpi	r24, 0x03	; 3
 19c:	09 f4       	brne	.+2      	; 0x1a0 <DIO_setPinValue+0x22>
 19e:	4c c0       	rjmp	.+152    	; 0x238 <DIO_setPinValue+0xba>
 1a0:	08 95       	ret
 1a2:	41 30       	cpi	r20, 0x01	; 1
 1a4:	59 f4       	brne	.+22     	; 0x1bc <DIO_setPinValue+0x3e>
 1a6:	2b b3       	in	r18, 0x1b	; 27
 1a8:	81 e0       	ldi	r24, 0x01	; 1
 1aa:	90 e0       	ldi	r25, 0x00	; 0
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_setPinValue+0x34>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	6a 95       	dec	r22
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_setPinValue+0x30>
 1b6:	82 2b       	or	r24, r18
 1b8:	8b bb       	out	0x1b, r24	; 27
 1ba:	08 95       	ret
 1bc:	2b b3       	in	r18, 0x1b	; 27
 1be:	81 e0       	ldi	r24, 0x01	; 1
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_setPinValue+0x4a>
 1c4:	88 0f       	add	r24, r24
 1c6:	99 1f       	adc	r25, r25
 1c8:	6a 95       	dec	r22
 1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_setPinValue+0x46>
 1cc:	80 95       	com	r24
 1ce:	82 23       	and	r24, r18
 1d0:	8b bb       	out	0x1b, r24	; 27
 1d2:	08 95       	ret
 1d4:	41 30       	cpi	r20, 0x01	; 1
 1d6:	59 f4       	brne	.+22     	; 0x1ee <DIO_setPinValue+0x70>
 1d8:	28 b3       	in	r18, 0x18	; 24
 1da:	81 e0       	ldi	r24, 0x01	; 1
 1dc:	90 e0       	ldi	r25, 0x00	; 0
 1de:	02 c0       	rjmp	.+4      	; 0x1e4 <DIO_setPinValue+0x66>
 1e0:	88 0f       	add	r24, r24
 1e2:	99 1f       	adc	r25, r25
 1e4:	6a 95       	dec	r22
 1e6:	e2 f7       	brpl	.-8      	; 0x1e0 <DIO_setPinValue+0x62>
 1e8:	82 2b       	or	r24, r18
 1ea:	88 bb       	out	0x18, r24	; 24
 1ec:	08 95       	ret
 1ee:	28 b3       	in	r18, 0x18	; 24
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_setPinValue+0x7c>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_setPinValue+0x78>
 1fe:	80 95       	com	r24
 200:	82 23       	and	r24, r18
 202:	88 bb       	out	0x18, r24	; 24
 204:	08 95       	ret
 206:	41 30       	cpi	r20, 0x01	; 1
 208:	59 f4       	brne	.+22     	; 0x220 <DIO_setPinValue+0xa2>
 20a:	25 b3       	in	r18, 0x15	; 21
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_setPinValue+0x98>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_setPinValue+0x94>
 21a:	82 2b       	or	r24, r18
 21c:	85 bb       	out	0x15, r24	; 21
 21e:	08 95       	ret
 220:	25 b3       	in	r18, 0x15	; 21
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_setPinValue+0xae>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_setPinValue+0xaa>
 230:	80 95       	com	r24
 232:	82 23       	and	r24, r18
 234:	85 bb       	out	0x15, r24	; 21
 236:	08 95       	ret
 238:	41 30       	cpi	r20, 0x01	; 1
 23a:	59 f4       	brne	.+22     	; 0x252 <DIO_setPinValue+0xd4>
 23c:	22 b3       	in	r18, 0x12	; 18
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <DIO_setPinValue+0xca>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	6a 95       	dec	r22
 24a:	e2 f7       	brpl	.-8      	; 0x244 <DIO_setPinValue+0xc6>
 24c:	82 2b       	or	r24, r18
 24e:	82 bb       	out	0x12, r24	; 18
 250:	08 95       	ret
 252:	22 b3       	in	r18, 0x12	; 18
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	02 c0       	rjmp	.+4      	; 0x25e <DIO_setPinValue+0xe0>
 25a:	88 0f       	add	r24, r24
 25c:	99 1f       	adc	r25, r25
 25e:	6a 95       	dec	r22
 260:	e2 f7       	brpl	.-8      	; 0x25a <DIO_setPinValue+0xdc>
 262:	80 95       	com	r24
 264:	82 23       	and	r24, r18
 266:	82 bb       	out	0x12, r24	; 18
 268:	08 95       	ret

0000026a <DIO_togglePinValue>:

void DIO_togglePinValue(u8 PortId, u8 PinId)

{
	
	if ( (PortId<=3) && (PinId<=7) ) 
 26a:	84 30       	cpi	r24, 0x04	; 4
 26c:	a8 f5       	brcc	.+106    	; 0x2d8 <DIO_togglePinValue+0x6e>
 26e:	68 30       	cpi	r22, 0x08	; 8
 270:	98 f5       	brcc	.+102    	; 0x2d8 <DIO_togglePinValue+0x6e>
	{
		switch (PortId ) 
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	89 f0       	breq	.+34     	; 0x298 <DIO_togglePinValue+0x2e>
 276:	28 f0       	brcs	.+10     	; 0x282 <DIO_togglePinValue+0x18>
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	c9 f0       	breq	.+50     	; 0x2ae <DIO_togglePinValue+0x44>
 27c:	83 30       	cpi	r24, 0x03	; 3
 27e:	11 f1       	breq	.+68     	; 0x2c4 <DIO_togglePinValue+0x5a>
 280:	08 95       	ret
		{
			case 0 : // DIO_PORTA
			
			TOG_BIT(PORTA,PinId) ; 
 282:	2b b3       	in	r18, 0x1b	; 27
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	90 e0       	ldi	r25, 0x00	; 0
 288:	02 c0       	rjmp	.+4      	; 0x28e <DIO_togglePinValue+0x24>
 28a:	88 0f       	add	r24, r24
 28c:	99 1f       	adc	r25, r25
 28e:	6a 95       	dec	r22
 290:	e2 f7       	brpl	.-8      	; 0x28a <DIO_togglePinValue+0x20>
 292:	82 27       	eor	r24, r18
 294:	8b bb       	out	0x1b, r24	; 27
			
			break ; 
 296:	08 95       	ret
			
			case 1 : // DIO_PORTB
			
			TOG_BIT(PORTB,PinId) ; 
 298:	28 b3       	in	r18, 0x18	; 24
 29a:	81 e0       	ldi	r24, 0x01	; 1
 29c:	90 e0       	ldi	r25, 0x00	; 0
 29e:	02 c0       	rjmp	.+4      	; 0x2a4 <DIO_togglePinValue+0x3a>
 2a0:	88 0f       	add	r24, r24
 2a2:	99 1f       	adc	r25, r25
 2a4:	6a 95       	dec	r22
 2a6:	e2 f7       	brpl	.-8      	; 0x2a0 <DIO_togglePinValue+0x36>
 2a8:	82 27       	eor	r24, r18
 2aa:	88 bb       	out	0x18, r24	; 24
			
			break ; 
 2ac:	08 95       	ret
			
			case 2 : // DIO_PORTC
			
			TOG_BIT(PORTC,PinId) ; 
 2ae:	25 b3       	in	r18, 0x15	; 21
 2b0:	81 e0       	ldi	r24, 0x01	; 1
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	02 c0       	rjmp	.+4      	; 0x2ba <DIO_togglePinValue+0x50>
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	6a 95       	dec	r22
 2bc:	e2 f7       	brpl	.-8      	; 0x2b6 <DIO_togglePinValue+0x4c>
 2be:	82 27       	eor	r24, r18
 2c0:	85 bb       	out	0x15, r24	; 21
			
			break ; 
 2c2:	08 95       	ret
			
			case 3 : // DIO_PORTD
			
			TOG_BIT(PORTD,PinId) ; 
 2c4:	22 b3       	in	r18, 0x12	; 18
 2c6:	81 e0       	ldi	r24, 0x01	; 1
 2c8:	90 e0       	ldi	r25, 0x00	; 0
 2ca:	02 c0       	rjmp	.+4      	; 0x2d0 <DIO_togglePinValue+0x66>
 2cc:	88 0f       	add	r24, r24
 2ce:	99 1f       	adc	r25, r25
 2d0:	6a 95       	dec	r22
 2d2:	e2 f7       	brpl	.-8      	; 0x2cc <DIO_togglePinValue+0x62>
 2d4:	82 27       	eor	r24, r18
 2d6:	82 bb       	out	0x12, r24	; 18
 2d8:	08 95       	ret

000002da <EXTI_enable>:

void EXTI_INT2setCallBack(void(*ptr)(void))
{
	if (ptr != NULL)
	{
		INT2pCallBack= ptr ;
 2da:	81 30       	cpi	r24, 0x01	; 1
 2dc:	61 f1       	breq	.+88     	; 0x336 <EXTI_enable+0x5c>
 2de:	20 f0       	brcs	.+8      	; 0x2e8 <EXTI_enable+0xe>
 2e0:	82 30       	cpi	r24, 0x02	; 2
 2e2:	09 f4       	brne	.+2      	; 0x2e6 <EXTI_enable+0xc>
 2e4:	4f c0       	rjmp	.+158    	; 0x384 <EXTI_enable+0xaa>
 2e6:	08 95       	ret
 2e8:	61 11       	cpse	r22, r1
 2ea:	07 c0       	rjmp	.+14     	; 0x2fa <EXTI_enable+0x20>
 2ec:	85 b7       	in	r24, 0x35	; 53
 2ee:	81 60       	ori	r24, 0x01	; 1
 2f0:	85 bf       	out	0x35, r24	; 53
 2f2:	85 b7       	in	r24, 0x35	; 53
 2f4:	82 60       	ori	r24, 0x02	; 2
 2f6:	85 bf       	out	0x35, r24	; 53
 2f8:	1a c0       	rjmp	.+52     	; 0x32e <EXTI_enable+0x54>
 2fa:	61 30       	cpi	r22, 0x01	; 1
 2fc:	39 f4       	brne	.+14     	; 0x30c <EXTI_enable+0x32>
 2fe:	85 b7       	in	r24, 0x35	; 53
 300:	8e 7f       	andi	r24, 0xFE	; 254
 302:	85 bf       	out	0x35, r24	; 53
 304:	85 b7       	in	r24, 0x35	; 53
 306:	82 60       	ori	r24, 0x02	; 2
 308:	85 bf       	out	0x35, r24	; 53
 30a:	11 c0       	rjmp	.+34     	; 0x32e <EXTI_enable+0x54>
 30c:	62 30       	cpi	r22, 0x02	; 2
 30e:	39 f4       	brne	.+14     	; 0x31e <EXTI_enable+0x44>
 310:	85 b7       	in	r24, 0x35	; 53
 312:	8e 7f       	andi	r24, 0xFE	; 254
 314:	85 bf       	out	0x35, r24	; 53
 316:	85 b7       	in	r24, 0x35	; 53
 318:	8d 7f       	andi	r24, 0xFD	; 253
 31a:	85 bf       	out	0x35, r24	; 53
 31c:	08 c0       	rjmp	.+16     	; 0x32e <EXTI_enable+0x54>
 31e:	63 30       	cpi	r22, 0x03	; 3
 320:	31 f4       	brne	.+12     	; 0x32e <EXTI_enable+0x54>
 322:	85 b7       	in	r24, 0x35	; 53
 324:	81 60       	ori	r24, 0x01	; 1
 326:	85 bf       	out	0x35, r24	; 53
 328:	85 b7       	in	r24, 0x35	; 53
 32a:	8d 7f       	andi	r24, 0xFD	; 253
 32c:	85 bf       	out	0x35, r24	; 53
 32e:	8b b7       	in	r24, 0x3b	; 59
 330:	80 64       	ori	r24, 0x40	; 64
 332:	8b bf       	out	0x3b, r24	; 59
 334:	08 95       	ret
 336:	61 11       	cpse	r22, r1
 338:	07 c0       	rjmp	.+14     	; 0x348 <EXTI_enable+0x6e>
 33a:	85 b7       	in	r24, 0x35	; 53
 33c:	84 60       	ori	r24, 0x04	; 4
 33e:	85 bf       	out	0x35, r24	; 53
 340:	85 b7       	in	r24, 0x35	; 53
 342:	88 60       	ori	r24, 0x08	; 8
 344:	85 bf       	out	0x35, r24	; 53
 346:	1a c0       	rjmp	.+52     	; 0x37c <EXTI_enable+0xa2>
 348:	61 30       	cpi	r22, 0x01	; 1
 34a:	39 f4       	brne	.+14     	; 0x35a <EXTI_enable+0x80>
 34c:	85 b7       	in	r24, 0x35	; 53
 34e:	8b 7f       	andi	r24, 0xFB	; 251
 350:	85 bf       	out	0x35, r24	; 53
 352:	85 b7       	in	r24, 0x35	; 53
 354:	88 60       	ori	r24, 0x08	; 8
 356:	85 bf       	out	0x35, r24	; 53
 358:	11 c0       	rjmp	.+34     	; 0x37c <EXTI_enable+0xa2>
 35a:	62 30       	cpi	r22, 0x02	; 2
 35c:	39 f4       	brne	.+14     	; 0x36c <EXTI_enable+0x92>
 35e:	85 b7       	in	r24, 0x35	; 53
 360:	8b 7f       	andi	r24, 0xFB	; 251
 362:	85 bf       	out	0x35, r24	; 53
 364:	85 b7       	in	r24, 0x35	; 53
 366:	87 7f       	andi	r24, 0xF7	; 247
 368:	85 bf       	out	0x35, r24	; 53
 36a:	08 c0       	rjmp	.+16     	; 0x37c <EXTI_enable+0xa2>
 36c:	63 30       	cpi	r22, 0x03	; 3
 36e:	31 f4       	brne	.+12     	; 0x37c <EXTI_enable+0xa2>
 370:	85 b7       	in	r24, 0x35	; 53
 372:	84 60       	ori	r24, 0x04	; 4
 374:	85 bf       	out	0x35, r24	; 53
 376:	85 b7       	in	r24, 0x35	; 53
 378:	87 7f       	andi	r24, 0xF7	; 247
 37a:	85 bf       	out	0x35, r24	; 53
 37c:	8b b7       	in	r24, 0x3b	; 59
 37e:	80 68       	ori	r24, 0x80	; 128
 380:	8b bf       	out	0x3b, r24	; 59
 382:	08 95       	ret
 384:	61 11       	cpse	r22, r1
 386:	04 c0       	rjmp	.+8      	; 0x390 <EXTI_enable+0xb6>
 388:	84 b7       	in	r24, 0x34	; 52
 38a:	80 64       	ori	r24, 0x40	; 64
 38c:	84 bf       	out	0x34, r24	; 52
 38e:	05 c0       	rjmp	.+10     	; 0x39a <EXTI_enable+0xc0>
 390:	61 30       	cpi	r22, 0x01	; 1
 392:	19 f4       	brne	.+6      	; 0x39a <EXTI_enable+0xc0>
 394:	84 b7       	in	r24, 0x34	; 52
 396:	8f 7b       	andi	r24, 0xBF	; 191
 398:	84 bf       	out	0x34, r24	; 52
 39a:	8b b7       	in	r24, 0x3b	; 59
 39c:	80 62       	ori	r24, 0x20	; 32
 39e:	8b bf       	out	0x3b, r24	; 59
 3a0:	08 95       	ret

000003a2 <EXTI_INT0setCallBack>:
 3a2:	00 97       	sbiw	r24, 0x00	; 0
 3a4:	21 f0       	breq	.+8      	; 0x3ae <EXTI_INT0setCallBack+0xc>
 3a6:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <INT0pCallBack+0x1>
 3aa:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <INT0pCallBack>
 3ae:	08 95       	ret

000003b0 <__vector_1>:
 3b0:	1f 92       	push	r1
 3b2:	0f 92       	push	r0
 3b4:	0f b6       	in	r0, 0x3f	; 63
 3b6:	0f 92       	push	r0
 3b8:	11 24       	eor	r1, r1
 3ba:	2f 93       	push	r18
 3bc:	3f 93       	push	r19
 3be:	4f 93       	push	r20
 3c0:	5f 93       	push	r21
 3c2:	6f 93       	push	r22
 3c4:	7f 93       	push	r23
 3c6:	8f 93       	push	r24
 3c8:	9f 93       	push	r25
 3ca:	af 93       	push	r26
 3cc:	bf 93       	push	r27
 3ce:	ef 93       	push	r30
 3d0:	ff 93       	push	r31
 3d2:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <INT0pCallBack>
 3d6:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <INT0pCallBack+0x1>
 3da:	30 97       	sbiw	r30, 0x00	; 0
 3dc:	09 f0       	breq	.+2      	; 0x3e0 <__vector_1+0x30>
 3de:	09 95       	icall
 3e0:	ff 91       	pop	r31
 3e2:	ef 91       	pop	r30
 3e4:	bf 91       	pop	r27
 3e6:	af 91       	pop	r26
 3e8:	9f 91       	pop	r25
 3ea:	8f 91       	pop	r24
 3ec:	7f 91       	pop	r23
 3ee:	6f 91       	pop	r22
 3f0:	5f 91       	pop	r21
 3f2:	4f 91       	pop	r20
 3f4:	3f 91       	pop	r19
 3f6:	2f 91       	pop	r18
 3f8:	0f 90       	pop	r0
 3fa:	0f be       	out	0x3f, r0	; 63
 3fc:	0f 90       	pop	r0
 3fe:	1f 90       	pop	r1
 400:	18 95       	reti

00000402 <__vector_2>:
 402:	1f 92       	push	r1
 404:	0f 92       	push	r0
 406:	0f b6       	in	r0, 0x3f	; 63
 408:	0f 92       	push	r0
 40a:	11 24       	eor	r1, r1
 40c:	2f 93       	push	r18
 40e:	3f 93       	push	r19
 410:	4f 93       	push	r20
 412:	5f 93       	push	r21
 414:	6f 93       	push	r22
 416:	7f 93       	push	r23
 418:	8f 93       	push	r24
 41a:	9f 93       	push	r25
 41c:	af 93       	push	r26
 41e:	bf 93       	push	r27
 420:	ef 93       	push	r30
 422:	ff 93       	push	r31
 424:	e0 91 82 00 	lds	r30, 0x0082	; 0x800082 <INT1pCallBack>
 428:	f0 91 83 00 	lds	r31, 0x0083	; 0x800083 <INT1pCallBack+0x1>
 42c:	30 97       	sbiw	r30, 0x00	; 0
 42e:	09 f0       	breq	.+2      	; 0x432 <__vector_2+0x30>
 430:	09 95       	icall
 432:	ff 91       	pop	r31
 434:	ef 91       	pop	r30
 436:	bf 91       	pop	r27
 438:	af 91       	pop	r26
 43a:	9f 91       	pop	r25
 43c:	8f 91       	pop	r24
 43e:	7f 91       	pop	r23
 440:	6f 91       	pop	r22
 442:	5f 91       	pop	r21
 444:	4f 91       	pop	r20
 446:	3f 91       	pop	r19
 448:	2f 91       	pop	r18
 44a:	0f 90       	pop	r0
 44c:	0f be       	out	0x3f, r0	; 63
 44e:	0f 90       	pop	r0
 450:	1f 90       	pop	r1
 452:	18 95       	reti

00000454 <__vector_3>:
}

// ISR function prototype for EXTI2
void __vector_3(void) __attribute__ ((signal));
void __vector_3(void)
{
 454:	1f 92       	push	r1
 456:	0f 92       	push	r0
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	0f 92       	push	r0
 45c:	11 24       	eor	r1, r1
 45e:	2f 93       	push	r18
 460:	3f 93       	push	r19
 462:	4f 93       	push	r20
 464:	5f 93       	push	r21
 466:	6f 93       	push	r22
 468:	7f 93       	push	r23
 46a:	8f 93       	push	r24
 46c:	9f 93       	push	r25
 46e:	af 93       	push	r26
 470:	bf 93       	push	r27
 472:	ef 93       	push	r30
 474:	ff 93       	push	r31
	if (INT2pCallBack != NULL)
 476:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__data_end>
 47a:	f0 91 81 00 	lds	r31, 0x0081	; 0x800081 <__data_end+0x1>
 47e:	30 97       	sbiw	r30, 0x00	; 0
 480:	09 f0       	breq	.+2      	; 0x484 <__vector_3+0x30>
	{
		INT2pCallBack();
 482:	09 95       	icall
	}
}
 484:	ff 91       	pop	r31
 486:	ef 91       	pop	r30
 488:	bf 91       	pop	r27
 48a:	af 91       	pop	r26
 48c:	9f 91       	pop	r25
 48e:	8f 91       	pop	r24
 490:	7f 91       	pop	r23
 492:	6f 91       	pop	r22
 494:	5f 91       	pop	r21
 496:	4f 91       	pop	r20
 498:	3f 91       	pop	r19
 49a:	2f 91       	pop	r18
 49c:	0f 90       	pop	r0
 49e:	0f be       	out	0x3f, r0	; 63
 4a0:	0f 90       	pop	r0
 4a2:	1f 90       	pop	r1
 4a4:	18 95       	reti

000004a6 <GI_enable>:
#include   "GI_interface.h"


void GI_enable(void)
{
	SET_BIT (SREG,7);
 4a6:	8f b7       	in	r24, 0x3f	; 63
 4a8:	80 68       	ori	r24, 0x80	; 128
 4aa:	8f bf       	out	0x3f, r24	; 63
 4ac:	08 95       	ret

000004ae <writeHalfPort>:
	
	#endif
}

static void writeHalfPort(u8 Value)
{
 4ae:	cf 93       	push	r28
 4b0:	c8 2f       	mov	r28, r24
	if (1==GET_BIT(Value,0))
 4b2:	80 ff       	sbrs	r24, 0
 4b4:	06 c0       	rjmp	.+12     	; 0x4c2 <writeHalfPort+0x14>
	{
		DIO_setPinValue(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_HIGH);
 4b6:	41 e0       	ldi	r20, 0x01	; 1
 4b8:	64 e0       	ldi	r22, 0x04	; 4
 4ba:	80 e0       	ldi	r24, 0x00	; 0
 4bc:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 4c0:	05 c0       	rjmp	.+10     	; 0x4cc <writeHalfPort+0x1e>
	}
	else 
	{
		DIO_setPinValue(LCD_D4_PORT, LCD_D4_PIN, DIO_PIN_LOW);
 4c2:	40 e0       	ldi	r20, 0x00	; 0
 4c4:	64 e0       	ldi	r22, 0x04	; 4
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	}
	
	if (1==GET_BIT(Value,1))
 4cc:	c1 ff       	sbrs	r28, 1
 4ce:	06 c0       	rjmp	.+12     	; 0x4dc <writeHalfPort+0x2e>
	{
		DIO_setPinValue(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_HIGH);
 4d0:	41 e0       	ldi	r20, 0x01	; 1
 4d2:	65 e0       	ldi	r22, 0x05	; 5
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 4da:	05 c0       	rjmp	.+10     	; 0x4e6 <writeHalfPort+0x38>
	}
	else
	{
		DIO_setPinValue(LCD_D5_PORT, LCD_D5_PIN, DIO_PIN_LOW);
 4dc:	40 e0       	ldi	r20, 0x00	; 0
 4de:	65 e0       	ldi	r22, 0x05	; 5
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	}
	
	if (1==GET_BIT(Value,2))
 4e6:	c2 ff       	sbrs	r28, 2
 4e8:	06 c0       	rjmp	.+12     	; 0x4f6 <writeHalfPort+0x48>
	{
		DIO_setPinValue(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_HIGH);
 4ea:	41 e0       	ldi	r20, 0x01	; 1
 4ec:	66 e0       	ldi	r22, 0x06	; 6
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 4f4:	05 c0       	rjmp	.+10     	; 0x500 <writeHalfPort+0x52>
	}
	else
	{
		DIO_setPinValue(LCD_D6_PORT, LCD_D6_PIN, DIO_PIN_LOW);
 4f6:	40 e0       	ldi	r20, 0x00	; 0
 4f8:	66 e0       	ldi	r22, 0x06	; 6
 4fa:	80 e0       	ldi	r24, 0x00	; 0
 4fc:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	}
	
	if (1==GET_BIT(Value,3))
 500:	c3 ff       	sbrs	r28, 3
 502:	06 c0       	rjmp	.+12     	; 0x510 <writeHalfPort+0x62>
	{
		DIO_setPinValue(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_HIGH);
 504:	41 e0       	ldi	r20, 0x01	; 1
 506:	67 e0       	ldi	r22, 0x07	; 7
 508:	80 e0       	ldi	r24, 0x00	; 0
 50a:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 50e:	05 c0       	rjmp	.+10     	; 0x51a <writeHalfPort+0x6c>
	}
	else
	{
		DIO_setPinValue(LCD_D7_PORT, LCD_D7_PIN, DIO_PIN_LOW);
 510:	40 e0       	ldi	r20, 0x00	; 0
 512:	67 e0       	ldi	r22, 0x07	; 7
 514:	80 e0       	ldi	r24, 0x00	; 0
 516:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	}
}
 51a:	cf 91       	pop	r28
 51c:	08 95       	ret

0000051e <LCD_sendCmnd>:
	LCD_sendCmnd(0b00000110);
}

void LCD_sendCmnd(u8 Cmnd)

{
 51e:	cf 93       	push	r28
 520:	c8 2f       	mov	r28, r24
	// set RS pin = 0 ( write command) 
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
 522:	40 e0       	ldi	r20, 0x00	; 0
 524:	61 e0       	ldi	r22, 0x01	; 1
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	// set RW pin = 0 ( write )
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
 52c:	40 e0       	ldi	r20, 0x00	; 0
 52e:	62 e0       	ldi	r22, 0x02	; 2
 530:	81 e0       	ldi	r24, 0x01	; 1
 532:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#elif LCD_MODE == LCD_4_BIT_MODE
	
	// Write the most 4-bit command on data pins
	writeHalfPort(Cmnd>>4);
 536:	8c 2f       	mov	r24, r28
 538:	82 95       	swap	r24
 53a:	8f 70       	andi	r24, 0x0F	; 15
 53c:	0e 94 57 02 	call	0x4ae	; 0x4ae <writeHalfPort>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 540:	41 e0       	ldi	r20, 0x01	; 1
 542:	63 e0       	ldi	r22, 0x03	; 3
 544:	81 e0       	ldi	r24, 0x01	; 1
 546:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 54a:	8f e9       	ldi	r24, 0x9F	; 159
 54c:	9f e0       	ldi	r25, 0x0F	; 15
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	f1 f7       	brne	.-4      	; 0x54e <LCD_sendCmnd+0x30>
 552:	00 c0       	rjmp	.+0      	; 0x554 <LCD_sendCmnd+0x36>
 554:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 556:	40 e0       	ldi	r20, 0x00	; 0
 558:	63 e0       	ldi	r22, 0x03	; 3
 55a:	81 e0       	ldi	r24, 0x01	; 1
 55c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	// Write the Least 4-bit command on data pins
	writeHalfPort(Cmnd);
 560:	8c 2f       	mov	r24, r28
 562:	0e 94 57 02 	call	0x4ae	; 0x4ae <writeHalfPort>
	
	/* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 566:	41 e0       	ldi	r20, 0x01	; 1
 568:	63 e0       	ldi	r22, 0x03	; 3
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 570:	8f e9       	ldi	r24, 0x9F	; 159
 572:	9f e0       	ldi	r25, 0x0F	; 15
 574:	01 97       	sbiw	r24, 0x01	; 1
 576:	f1 f7       	brne	.-4      	; 0x574 <LCD_sendCmnd+0x56>
 578:	00 c0       	rjmp	.+0      	; 0x57a <LCD_sendCmnd+0x5c>
 57a:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 57c:	40 e0       	ldi	r20, 0x00	; 0
 57e:	63 e0       	ldi	r22, 0x03	; 3
 580:	81 e0       	ldi	r24, 0x01	; 1
 582:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	#endif 
	
}
 586:	cf 91       	pop	r28
 588:	08 95       	ret

0000058a <LCD_init>:
 58a:	2f e7       	ldi	r18, 0x7F	; 127
 58c:	85 eb       	ldi	r24, 0xB5	; 181
 58e:	91 e0       	ldi	r25, 0x01	; 1
 590:	21 50       	subi	r18, 0x01	; 1
 592:	80 40       	sbci	r24, 0x00	; 0
 594:	90 40       	sbci	r25, 0x00	; 0
 596:	e1 f7       	brne	.-8      	; 0x590 <LCD_init+0x6>
 598:	00 c0       	rjmp	.+0      	; 0x59a <LCD_init+0x10>
 59a:	00 00       	nop
	#if LCD_MODE == LCD_8_BIT_MODE
	LCD_sendCmnd(0b00111000); // Function Set command 2*16 LCD
	
	#elif LCD_MODE == LCD_4_BIT_MODE
	// set RS pin = 0 ( write command)
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_LOW);
 59c:	40 e0       	ldi	r20, 0x00	; 0
 59e:	61 e0       	ldi	r22, 0x01	; 1
 5a0:	81 e0       	ldi	r24, 0x01	; 1
 5a2:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	// set RW pin = 0 ( write )
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
 5a6:	40 e0       	ldi	r20, 0x00	; 0
 5a8:	62 e0       	ldi	r22, 0x02	; 2
 5aa:	81 e0       	ldi	r24, 0x01	; 1
 5ac:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	writeHalfPort(0b0010);
 5b0:	82 e0       	ldi	r24, 0x02	; 2
 5b2:	0e 94 57 02 	call	0x4ae	; 0x4ae <writeHalfPort>
	
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 5b6:	41 e0       	ldi	r20, 0x01	; 1
 5b8:	63 e0       	ldi	r22, 0x03	; 3
 5ba:	81 e0       	ldi	r24, 0x01	; 1
 5bc:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 5c0:	8f e9       	ldi	r24, 0x9F	; 159
 5c2:	9f e0       	ldi	r25, 0x0F	; 15
 5c4:	01 97       	sbiw	r24, 0x01	; 1
 5c6:	f1 f7       	brne	.-4      	; 0x5c4 <LCD_init+0x3a>
 5c8:	00 c0       	rjmp	.+0      	; 0x5ca <LCD_init+0x40>
 5ca:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 5cc:	40 e0       	ldi	r20, 0x00	; 0
 5ce:	63 e0       	ldi	r22, 0x03	; 3
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	LCD_sendCmnd(0b00101000);
 5d6:	88 e2       	ldi	r24, 0x28	; 40
 5d8:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_sendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5dc:	90 ef       	ldi	r25, 0xF0	; 240
 5de:	9a 95       	dec	r25
 5e0:	f1 f7       	brne	.-4      	; 0x5de <LCD_init+0x54>
	#endif
	
	_delay_us(45);
	
	// display on , cursor on , blink on 
	LCD_sendCmnd(0b00001111);
 5e2:	8f e0       	ldi	r24, 0x0F	; 15
 5e4:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_sendCmnd>
 5e8:	20 ef       	ldi	r18, 0xF0	; 240
 5ea:	2a 95       	dec	r18
 5ec:	f1 f7       	brne	.-4      	; 0x5ea <LCD_init+0x60>
	_delay_us(45);
	
	// clear display 
	LCD_sendCmnd(0b00000001);
 5ee:	81 e0       	ldi	r24, 0x01	; 1
 5f0:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_sendCmnd>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5f4:	8f e3       	ldi	r24, 0x3F	; 63
 5f6:	9f e1       	ldi	r25, 0x1F	; 31
 5f8:	01 97       	sbiw	r24, 0x01	; 1
 5fa:	f1 f7       	brne	.-4      	; 0x5f8 <LCD_init+0x6e>
 5fc:	00 c0       	rjmp	.+0      	; 0x5fe <LCD_init+0x74>
 5fe:	00 00       	nop
	_delay_ms(2);
	
	// set entry mode 
	LCD_sendCmnd(0b00000110);
 600:	86 e0       	ldi	r24, 0x06	; 6
 602:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_sendCmnd>
 606:	08 95       	ret

00000608 <LCD_sendChar>:
	
}

void LCD_sendChar(u8 Data)

{
 608:	cf 93       	push	r28
 60a:	c8 2f       	mov	r28, r24
	// set RS pin = 1 ( write Data)
	DIO_setPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_PIN_HIGH);
 60c:	41 e0       	ldi	r20, 0x01	; 1
 60e:	61 e0       	ldi	r22, 0x01	; 1
 610:	81 e0       	ldi	r24, 0x01	; 1
 612:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	// set RW pin = 0 ( write )
	DIO_setPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_PIN_LOW);
 616:	40 e0       	ldi	r20, 0x00	; 0
 618:	62 e0       	ldi	r22, 0x02	; 2
 61a:	81 e0       	ldi	r24, 0x01	; 1
 61c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
	
	#elif LCD_MODE == LCD_4_BIT_MODE
	
	// Write the most 4-bit Data on data pins
	writeHalfPort(Data>>4);
 620:	8c 2f       	mov	r24, r28
 622:	82 95       	swap	r24
 624:	8f 70       	andi	r24, 0x0F	; 15
 626:	0e 94 57 02 	call	0x4ae	; 0x4ae <writeHalfPort>
	
	 /* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 62a:	41 e0       	ldi	r20, 0x01	; 1
 62c:	63 e0       	ldi	r22, 0x03	; 3
 62e:	81 e0       	ldi	r24, 0x01	; 1
 630:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 634:	8f e9       	ldi	r24, 0x9F	; 159
 636:	9f e0       	ldi	r25, 0x0F	; 15
 638:	01 97       	sbiw	r24, 0x01	; 1
 63a:	f1 f7       	brne	.-4      	; 0x638 <LCD_sendChar+0x30>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <LCD_sendChar+0x36>
 63e:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 640:	40 e0       	ldi	r20, 0x00	; 0
 642:	63 e0       	ldi	r22, 0x03	; 3
 644:	81 e0       	ldi	r24, 0x01	; 1
 646:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	// Write the Least 4-bit Data on data pins
	writeHalfPort(Data);
 64a:	8c 2f       	mov	r24, r28
 64c:	0e 94 57 02 	call	0x4ae	; 0x4ae <writeHalfPort>
	
	 /* Enable Pulse *//* H => L */
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_HIGH);
 650:	41 e0       	ldi	r20, 0x01	; 1
 652:	63 e0       	ldi	r22, 0x03	; 3
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
 65a:	8f e9       	ldi	r24, 0x9F	; 159
 65c:	9f e0       	ldi	r25, 0x0F	; 15
 65e:	01 97       	sbiw	r24, 0x01	; 1
 660:	f1 f7       	brne	.-4      	; 0x65e <LCD_sendChar+0x56>
 662:	00 c0       	rjmp	.+0      	; 0x664 <LCD_sendChar+0x5c>
 664:	00 00       	nop
	_delay_ms(1);
	DIO_setPinValue(LCD_EN_PORT,LCD_EN_PIN,DIO_PIN_LOW);
 666:	40 e0       	ldi	r20, 0x00	; 0
 668:	63 e0       	ldi	r22, 0x03	; 3
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	0e 94 bf 00 	call	0x17e	; 0x17e <DIO_setPinValue>
	
	#endif
}
 670:	cf 91       	pop	r28
 672:	08 95       	ret

00000674 <LCD_sendString>:
	}
}

void LCD_sendString(u8 *String)

{
 674:	0f 93       	push	r16
 676:	1f 93       	push	r17
 678:	cf 93       	push	r28
	if(String != NULL)
 67a:	00 97       	sbiw	r24, 0x00	; 0
 67c:	29 f4       	brne	.+10     	; 0x688 <LCD_sendString+0x14>
 67e:	0c c0       	rjmp	.+24     	; 0x698 <LCD_sendString+0x24>
	{
		u8 stringLength = 0;
		while(String[stringLength] != '\0')
		{
			LCD_sendChar(String[stringLength]);
 680:	0e 94 04 03 	call	0x608	; 0x608 <LCD_sendChar>
			++stringLength;
 684:	cf 5f       	subi	r28, 0xFF	; 255
 686:	02 c0       	rjmp	.+4      	; 0x68c <LCD_sendString+0x18>
 688:	8c 01       	movw	r16, r24
 68a:	c0 e0       	ldi	r28, 0x00	; 0

{
	if(String != NULL)
	{
		u8 stringLength = 0;
		while(String[stringLength] != '\0')
 68c:	f8 01       	movw	r30, r16
 68e:	ec 0f       	add	r30, r28
 690:	f1 1d       	adc	r31, r1
 692:	80 81       	ld	r24, Z
 694:	81 11       	cpse	r24, r1
 696:	f4 cf       	rjmp	.-24     	; 0x680 <LCD_sendString+0xc>
		{
			LCD_sendChar(String[stringLength]);
			++stringLength;
		}
	}
}
 698:	cf 91       	pop	r28
 69a:	1f 91       	pop	r17
 69c:	0f 91       	pop	r16
 69e:	08 95       	ret

000006a0 <LCD_clear>:

void LCD_clear(void)

{
	// clear display
	LCD_sendCmnd(0b00000001);
 6a0:	81 e0       	ldi	r24, 0x01	; 1
 6a2:	0e 94 8f 02 	call	0x51e	; 0x51e <LCD_sendCmnd>
 6a6:	8f e3       	ldi	r24, 0x3F	; 63
 6a8:	9f e1       	ldi	r25, 0x1F	; 31
 6aa:	01 97       	sbiw	r24, 0x01	; 1
 6ac:	f1 f7       	brne	.-4      	; 0x6aa <LCD_clear+0xa>
 6ae:	00 c0       	rjmp	.+0      	; 0x6b0 <LCD_clear+0x10>
 6b0:	00 00       	nop
 6b2:	08 95       	ret

000006b4 <func>:
}

void func(void) 

{
	DIO_togglePinValue(DIO_PORTA,DIO_PIN3);
 6b4:	63 e0       	ldi	r22, 0x03	; 3
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	0e 94 35 01 	call	0x26a	; 0x26a <DIO_togglePinValue>
	LCD_clear();
 6bc:	0e 94 50 03 	call	0x6a0	; 0x6a0 <LCD_clear>
	LCD_sendString("Ahmed Alaalotfy");
 6c0:	80 e6       	ldi	r24, 0x60	; 96
 6c2:	90 e0       	ldi	r25, 0x00	; 0
 6c4:	0e 94 3a 03 	call	0x674	; 0x674 <LCD_sendString>
 6c8:	08 95       	ret

000006ca <main>:
int main(void)
{
	/*DIO_setPinDirection(DIO_PORTD,DIO_PIN2,DIO_PIN_INPUT);
	DIO_setPinDirection(DIO_PORTA,DIO_PIN3,DIO_PIN_OUTPUT);*/
	
	DIO_setPinDirection(DIO_PORTA,DIO_PIN4,DIO_PIN_OUTPUT);
 6ca:	41 e0       	ldi	r20, 0x01	; 1
 6cc:	64 e0       	ldi	r22, 0x04	; 4
 6ce:	80 e0       	ldi	r24, 0x00	; 0
 6d0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN5,DIO_PIN_OUTPUT);
 6d4:	41 e0       	ldi	r20, 0x01	; 1
 6d6:	65 e0       	ldi	r22, 0x05	; 5
 6d8:	80 e0       	ldi	r24, 0x00	; 0
 6da:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN6,DIO_PIN_OUTPUT);
 6de:	41 e0       	ldi	r20, 0x01	; 1
 6e0:	66 e0       	ldi	r22, 0x06	; 6
 6e2:	80 e0       	ldi	r24, 0x00	; 0
 6e4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTA,DIO_PIN7,DIO_PIN_OUTPUT);
 6e8:	41 e0       	ldi	r20, 0x01	; 1
 6ea:	67 e0       	ldi	r22, 0x07	; 7
 6ec:	80 e0       	ldi	r24, 0x00	; 0
 6ee:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	
	DIO_setPinDirection(DIO_PORTB,DIO_PIN1,DIO_PIN_OUTPUT);
 6f2:	41 e0       	ldi	r20, 0x01	; 1
 6f4:	61 e0       	ldi	r22, 0x01	; 1
 6f6:	81 e0       	ldi	r24, 0x01	; 1
 6f8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN2,DIO_PIN_OUTPUT);
 6fc:	41 e0       	ldi	r20, 0x01	; 1
 6fe:	62 e0       	ldi	r22, 0x02	; 2
 700:	81 e0       	ldi	r24, 0x01	; 1
 702:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	DIO_setPinDirection(DIO_PORTB,DIO_PIN3,DIO_PIN_OUTPUT);
 706:	41 e0       	ldi	r20, 0x01	; 1
 708:	63 e0       	ldi	r22, 0x03	; 3
 70a:	81 e0       	ldi	r24, 0x01	; 1
 70c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	
	DIO_setPinDirection(DIO_PORTA,DIO_PIN3,DIO_PIN_OUTPUT);
 710:	41 e0       	ldi	r20, 0x01	; 1
 712:	63 e0       	ldi	r22, 0x03	; 3
 714:	80 e0       	ldi	r24, 0x00	; 0
 716:	0e 94 49 00 	call	0x92	; 0x92 <DIO_setPinDirection>
	
	LCD_init();
 71a:	0e 94 c5 02 	call	0x58a	; 0x58a <LCD_init>
	
	LCD_sendString("Press Button 2");
 71e:	80 e7       	ldi	r24, 0x70	; 112
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	0e 94 3a 03 	call	0x674	; 0x674 <LCD_sendString>
	
	// GENERAL INTERRUPT ENABLE 
	GI_enable();
 726:	0e 94 53 02 	call	0x4a6	; 0x4a6 <GI_enable>
	
	EXTI_INT0setCallBack(&func);
 72a:	8a e5       	ldi	r24, 0x5A	; 90
 72c:	93 e0       	ldi	r25, 0x03	; 3
 72e:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <EXTI_INT0setCallBack>
    EXTI_enable(EXTI_INT0,EXTI_RISING_EDGE);
 732:	60 e0       	ldi	r22, 0x00	; 0
 734:	80 e0       	ldi	r24, 0x00	; 0
 736:	0e 94 6d 01 	call	0x2da	; 0x2da <EXTI_enable>
 73a:	ff cf       	rjmp	.-2      	; 0x73a <main+0x70>

0000073c <_exit>:
 73c:	f8 94       	cli

0000073e <__stop_program>:
 73e:	ff cf       	rjmp	.-2      	; 0x73e <__stop_program>
