
SSD_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003d6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000042a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000042a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000045c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000c8  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000eb2  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000007b1  00000000  00000000  00001412  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008af  00000000  00000000  00001bc3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000150  00000000  00000000  00002474  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004ab  00000000  00000000  000025c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000727  00000000  00000000  00002a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000098  00000000  00000000  00003196  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 22 01 	call	0x244	; 0x244 <main>
  64:	0c 94 e9 01 	jmp	0x3d2	; 0x3d2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_setPinDirection>:
/* PINS APIS*/ 

void DIO_setPinDirection(u8 PortId, u8 PinId , u8 PinDirection ) 

{
 if ( (PortId<=3) && (PinId<=7) && ((PinDirection == DIO_PIN_OUTPUT ) || (PinDirection == DIO_PIN_INPUT)) )
  6c:	84 30       	cpi	r24, 0x04	; 4
  6e:	08 f0       	brcs	.+2      	; 0x72 <DIO_setPinDirection+0x6>
  70:	72 c0       	rjmp	.+228    	; 0x156 <DIO_setPinDirection+0xea>
  72:	68 30       	cpi	r22, 0x08	; 8
  74:	08 f0       	brcs	.+2      	; 0x78 <DIO_setPinDirection+0xc>
  76:	6f c0       	rjmp	.+222    	; 0x156 <DIO_setPinDirection+0xea>
  78:	42 30       	cpi	r20, 0x02	; 2
  7a:	08 f0       	brcs	.+2      	; 0x7e <DIO_setPinDirection+0x12>
  7c:	6c c0       	rjmp	.+216    	; 0x156 <DIO_setPinDirection+0xea>
 { 
	switch (PortId)  // DIO PORTA
  7e:	81 30       	cpi	r24, 0x01	; 1
  80:	01 f1       	breq	.+64     	; 0xc2 <DIO_setPinDirection+0x56>
  82:	30 f0       	brcs	.+12     	; 0x90 <DIO_setPinDirection+0x24>
  84:	82 30       	cpi	r24, 0x02	; 2
  86:	b1 f1       	breq	.+108    	; 0xf4 <DIO_setPinDirection+0x88>
  88:	83 30       	cpi	r24, 0x03	; 3
  8a:	09 f4       	brne	.+2      	; 0x8e <DIO_setPinDirection+0x22>
  8c:	4c c0       	rjmp	.+152    	; 0x126 <DIO_setPinDirection+0xba>
  8e:	08 95       	ret
	{
		case 0 : 
		if (DIO_PIN_OUTPUT == PinDirection)
  90:	41 30       	cpi	r20, 0x01	; 1
  92:	59 f4       	brne	.+22     	; 0xaa <DIO_setPinDirection+0x3e>
		{
			SET_BIT(DDRA,PinId);
  94:	2a b3       	in	r18, 0x1a	; 26
  96:	81 e0       	ldi	r24, 0x01	; 1
  98:	90 e0       	ldi	r25, 0x00	; 0
  9a:	02 c0       	rjmp	.+4      	; 0xa0 <DIO_setPinDirection+0x34>
  9c:	88 0f       	add	r24, r24
  9e:	99 1f       	adc	r25, r25
  a0:	6a 95       	dec	r22
  a2:	e2 f7       	brpl	.-8      	; 0x9c <DIO_setPinDirection+0x30>
  a4:	82 2b       	or	r24, r18
  a6:	8a bb       	out	0x1a, r24	; 26
  a8:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRA,PinId);
  aa:	2a b3       	in	r18, 0x1a	; 26
  ac:	81 e0       	ldi	r24, 0x01	; 1
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	02 c0       	rjmp	.+4      	; 0xb6 <DIO_setPinDirection+0x4a>
  b2:	88 0f       	add	r24, r24
  b4:	99 1f       	adc	r25, r25
  b6:	6a 95       	dec	r22
  b8:	e2 f7       	brpl	.-8      	; 0xb2 <DIO_setPinDirection+0x46>
  ba:	80 95       	com	r24
  bc:	82 23       	and	r24, r18
  be:	8a bb       	out	0x1a, r24	; 26
  c0:	08 95       	ret
		}
		break ;
		
		case 1 : // DIO PORTB 
		if (DIO_PIN_OUTPUT == PinDirection)
  c2:	41 30       	cpi	r20, 0x01	; 1
  c4:	59 f4       	brne	.+22     	; 0xdc <DIO_setPinDirection+0x70>
		{
			SET_BIT(DDRB,PinId);
  c6:	27 b3       	in	r18, 0x17	; 23
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_setPinDirection+0x66>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_setPinDirection+0x62>
  d6:	82 2b       	or	r24, r18
  d8:	87 bb       	out	0x17, r24	; 23
  da:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRB,PinId);
  dc:	27 b3       	in	r18, 0x17	; 23
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_setPinDirection+0x7c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	6a 95       	dec	r22
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_setPinDirection+0x78>
  ec:	80 95       	com	r24
  ee:	82 23       	and	r24, r18
  f0:	87 bb       	out	0x17, r24	; 23
  f2:	08 95       	ret
		}
		break ;
		
		case 2 : // DIO PORTC 
		if (DIO_PIN_OUTPUT == PinDirection)
  f4:	41 30       	cpi	r20, 0x01	; 1
  f6:	59 f4       	brne	.+22     	; 0x10e <DIO_setPinDirection+0xa2>
		{
			SET_BIT(DDRC,PinId);
  f8:	24 b3       	in	r18, 0x14	; 20
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	90 e0       	ldi	r25, 0x00	; 0
  fe:	02 c0       	rjmp	.+4      	; 0x104 <DIO_setPinDirection+0x98>
 100:	88 0f       	add	r24, r24
 102:	99 1f       	adc	r25, r25
 104:	6a 95       	dec	r22
 106:	e2 f7       	brpl	.-8      	; 0x100 <DIO_setPinDirection+0x94>
 108:	82 2b       	or	r24, r18
 10a:	84 bb       	out	0x14, r24	; 20
 10c:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRC,PinId);
 10e:	24 b3       	in	r18, 0x14	; 20
 110:	81 e0       	ldi	r24, 0x01	; 1
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	02 c0       	rjmp	.+4      	; 0x11a <DIO_setPinDirection+0xae>
 116:	88 0f       	add	r24, r24
 118:	99 1f       	adc	r25, r25
 11a:	6a 95       	dec	r22
 11c:	e2 f7       	brpl	.-8      	; 0x116 <DIO_setPinDirection+0xaa>
 11e:	80 95       	com	r24
 120:	82 23       	and	r24, r18
 122:	84 bb       	out	0x14, r24	; 20
 124:	08 95       	ret
		}
		break ;
		
		case 3 : // DIO PORTD 
		if (DIO_PIN_OUTPUT == PinDirection)
 126:	41 30       	cpi	r20, 0x01	; 1
 128:	59 f4       	brne	.+22     	; 0x140 <DIO_setPinDirection+0xd4>
		{
			SET_BIT(DDRD,PinId);
 12a:	21 b3       	in	r18, 0x11	; 17
 12c:	81 e0       	ldi	r24, 0x01	; 1
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_setPinDirection+0xca>
 132:	88 0f       	add	r24, r24
 134:	99 1f       	adc	r25, r25
 136:	6a 95       	dec	r22
 138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_setPinDirection+0xc6>
 13a:	82 2b       	or	r24, r18
 13c:	81 bb       	out	0x11, r24	; 17
 13e:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRD,PinId);
 140:	21 b3       	in	r18, 0x11	; 17
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_setPinDirection+0xe0>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	6a 95       	dec	r22
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_setPinDirection+0xdc>
 150:	80 95       	com	r24
 152:	82 23       	and	r24, r18
 154:	81 bb       	out	0x11, r24	; 17
 156:	08 95       	ret

00000158 <DIO_setPinValue>:
}

void DIO_setPinValue(u8 PortId, u8 PinId , u8 PinValue)

{
	 if ( (PortId<=3) && (PinId<=7) && ((PinValue == DIO_PIN_HIGH ) || (PinValue == DIO_PIN_LOW)) )
 158:	84 30       	cpi	r24, 0x04	; 4
 15a:	08 f0       	brcs	.+2      	; 0x15e <DIO_setPinValue+0x6>
 15c:	72 c0       	rjmp	.+228    	; 0x242 <DIO_setPinValue+0xea>
 15e:	68 30       	cpi	r22, 0x08	; 8
 160:	08 f0       	brcs	.+2      	; 0x164 <DIO_setPinValue+0xc>
 162:	6f c0       	rjmp	.+222    	; 0x242 <DIO_setPinValue+0xea>
 164:	42 30       	cpi	r20, 0x02	; 2
 166:	08 f0       	brcs	.+2      	; 0x16a <DIO_setPinValue+0x12>
 168:	6c c0       	rjmp	.+216    	; 0x242 <DIO_setPinValue+0xea>
	 {
		 switch (PortId) 
 16a:	81 30       	cpi	r24, 0x01	; 1
 16c:	01 f1       	breq	.+64     	; 0x1ae <DIO_setPinValue+0x56>
 16e:	30 f0       	brcs	.+12     	; 0x17c <DIO_setPinValue+0x24>
 170:	82 30       	cpi	r24, 0x02	; 2
 172:	b1 f1       	breq	.+108    	; 0x1e0 <DIO_setPinValue+0x88>
 174:	83 30       	cpi	r24, 0x03	; 3
 176:	09 f4       	brne	.+2      	; 0x17a <DIO_setPinValue+0x22>
 178:	4c c0       	rjmp	.+152    	; 0x212 <DIO_setPinValue+0xba>
 17a:	08 95       	ret
		 {
			 case 0 : // DIO_PORTA
			 if (DIO_PIN_HIGH==PinValue)
 17c:	41 30       	cpi	r20, 0x01	; 1
 17e:	59 f4       	brne	.+22     	; 0x196 <DIO_setPinValue+0x3e>
			 {
			    SET_BIT(PORTA,PinId);
 180:	2b b3       	in	r18, 0x1b	; 27
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_setPinValue+0x34>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	6a 95       	dec	r22
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_setPinValue+0x30>
 190:	82 2b       	or	r24, r18
 192:	8b bb       	out	0x1b, r24	; 27
 194:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTA,PinId) ; 
 196:	2b b3       	in	r18, 0x1b	; 27
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_setPinValue+0x4a>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_setPinValue+0x46>
 1a6:	80 95       	com	r24
 1a8:	82 23       	and	r24, r18
 1aa:	8b bb       	out	0x1b, r24	; 27
 1ac:	08 95       	ret
			 }
			 break ; 
			 
			 case 1 : // DIO_PORTB
			 if (DIO_PIN_HIGH==PinValue)
 1ae:	41 30       	cpi	r20, 0x01	; 1
 1b0:	59 f4       	brne	.+22     	; 0x1c8 <DIO_setPinValue+0x70>
			 {
			    SET_BIT(PORTB,PinId);
 1b2:	28 b3       	in	r18, 0x18	; 24
 1b4:	81 e0       	ldi	r24, 0x01	; 1
 1b6:	90 e0       	ldi	r25, 0x00	; 0
 1b8:	02 c0       	rjmp	.+4      	; 0x1be <DIO_setPinValue+0x66>
 1ba:	88 0f       	add	r24, r24
 1bc:	99 1f       	adc	r25, r25
 1be:	6a 95       	dec	r22
 1c0:	e2 f7       	brpl	.-8      	; 0x1ba <DIO_setPinValue+0x62>
 1c2:	82 2b       	or	r24, r18
 1c4:	88 bb       	out	0x18, r24	; 24
 1c6:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTB,PinId) ; 
 1c8:	28 b3       	in	r18, 0x18	; 24
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_setPinValue+0x7c>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_setPinValue+0x78>
 1d8:	80 95       	com	r24
 1da:	82 23       	and	r24, r18
 1dc:	88 bb       	out	0x18, r24	; 24
 1de:	08 95       	ret
			 }
			 break ; 
			 
			 case 2 : // DIO_PORTC
			 if (DIO_PIN_HIGH==PinValue)
 1e0:	41 30       	cpi	r20, 0x01	; 1
 1e2:	59 f4       	brne	.+22     	; 0x1fa <DIO_setPinValue+0xa2>
			 {
			    SET_BIT(PORTC,PinId);
 1e4:	25 b3       	in	r18, 0x15	; 21
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_setPinValue+0x98>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	6a 95       	dec	r22
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_setPinValue+0x94>
 1f4:	82 2b       	or	r24, r18
 1f6:	85 bb       	out	0x15, r24	; 21
 1f8:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTC,PinId) ; 
 1fa:	25 b3       	in	r18, 0x15	; 21
 1fc:	81 e0       	ldi	r24, 0x01	; 1
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	02 c0       	rjmp	.+4      	; 0x206 <DIO_setPinValue+0xae>
 202:	88 0f       	add	r24, r24
 204:	99 1f       	adc	r25, r25
 206:	6a 95       	dec	r22
 208:	e2 f7       	brpl	.-8      	; 0x202 <DIO_setPinValue+0xaa>
 20a:	80 95       	com	r24
 20c:	82 23       	and	r24, r18
 20e:	85 bb       	out	0x15, r24	; 21
 210:	08 95       	ret
			 }
			 break ; 
			 
			 case 3 : // DIO_PORTD
			 if (DIO_PIN_HIGH==PinValue)
 212:	41 30       	cpi	r20, 0x01	; 1
 214:	59 f4       	brne	.+22     	; 0x22c <DIO_setPinValue+0xd4>
			 {
			    SET_BIT(PORTD,PinId);
 216:	22 b3       	in	r18, 0x12	; 18
 218:	81 e0       	ldi	r24, 0x01	; 1
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	02 c0       	rjmp	.+4      	; 0x222 <DIO_setPinValue+0xca>
 21e:	88 0f       	add	r24, r24
 220:	99 1f       	adc	r25, r25
 222:	6a 95       	dec	r22
 224:	e2 f7       	brpl	.-8      	; 0x21e <DIO_setPinValue+0xc6>
 226:	82 2b       	or	r24, r18
 228:	82 bb       	out	0x12, r24	; 18
 22a:	08 95       	ret
			 }
			 else 
			 {
				 CLR_BIT(PORTD,PinId) ; 
 22c:	22 b3       	in	r18, 0x12	; 18
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	90 e0       	ldi	r25, 0x00	; 0
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_setPinValue+0xe0>
 234:	88 0f       	add	r24, r24
 236:	99 1f       	adc	r25, r25
 238:	6a 95       	dec	r22
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_setPinValue+0xdc>
 23c:	80 95       	com	r24
 23e:	82 23       	and	r24, r18
 240:	82 bb       	out	0x12, r24	; 18
 242:	08 95       	ret

00000244 <main>:


int main(void)
{
    u8 Ones , Tens , Timer ; 
    SSD_on();
 244:	0e 94 7f 01 	call	0x2fe	; 0x2fe <SSD_on>
	
    while (1) 
    {
		for (Tens= 0 ; Tens < 10 ; Tens++ )
 248:	10 e0       	ldi	r17, 0x00	; 0
 24a:	1e c0       	rjmp	.+60     	; 0x288 <main+0x44>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24c:	2f ef       	ldi	r18, 0xFF	; 255
 24e:	81 ef       	ldi	r24, 0xF1	; 241
 250:	9b e2       	ldi	r25, 0x2B	; 43
 252:	21 50       	subi	r18, 0x01	; 1
 254:	80 40       	sbci	r24, 0x00	; 0
 256:	90 40       	sbci	r25, 0x00	; 0
 258:	e1 f7       	brne	.-8      	; 0x252 <main+0xe>
 25a:	00 c0       	rjmp	.+0      	; 0x25c <main+0x18>
 25c:	00 00       	nop
		{
			for (Ones= 0 ; Ones < 10 ; Ones++)
			{
				_delay_ms(900);
				for (Timer = 0 ; Timer < 10 ; Timer++ )
 25e:	c0 e0       	ldi	r28, 0x00	; 0
 260:	0b c0       	rjmp	.+22     	; 0x278 <main+0x34>
				{
					SSD_displayFullNumber(Tens,Ones);
 262:	6d 2f       	mov	r22, r29
 264:	81 2f       	mov	r24, r17
 266:	0e 94 b2 01 	call	0x364	; 0x364 <SSD_displayFullNumber>
 26a:	8f e5       	ldi	r24, 0x5F	; 95
 26c:	9d e6       	ldi	r25, 0x6D	; 109
 26e:	01 97       	sbiw	r24, 0x01	; 1
 270:	f1 f7       	brne	.-4      	; 0x26e <main+0x2a>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0x30>
 274:	00 00       	nop
		for (Tens= 0 ; Tens < 10 ; Tens++ )
		{
			for (Ones= 0 ; Ones < 10 ; Ones++)
			{
				_delay_ms(900);
				for (Timer = 0 ; Timer < 10 ; Timer++ )
 276:	cf 5f       	subi	r28, 0xFF	; 255
 278:	ca 30       	cpi	r28, 0x0A	; 10
 27a:	98 f3       	brcs	.-26     	; 0x262 <main+0x1e>
	
    while (1) 
    {
		for (Tens= 0 ; Tens < 10 ; Tens++ )
		{
			for (Ones= 0 ; Ones < 10 ; Ones++)
 27c:	df 5f       	subi	r29, 0xFF	; 255
 27e:	01 c0       	rjmp	.+2      	; 0x282 <main+0x3e>
 280:	d0 e0       	ldi	r29, 0x00	; 0
 282:	da 30       	cpi	r29, 0x0A	; 10
 284:	18 f3       	brcs	.-58     	; 0x24c <main+0x8>
    u8 Ones , Tens , Timer ; 
    SSD_on();
	
    while (1) 
    {
		for (Tens= 0 ; Tens < 10 ; Tens++ )
 286:	1f 5f       	subi	r17, 0xFF	; 255
 288:	1a 30       	cpi	r17, 0x0A	; 10
 28a:	d0 f3       	brcs	.-12     	; 0x280 <main+0x3c>
 28c:	dd cf       	rjmp	.-70     	; 0x248 <main+0x4>

0000028e <writeHalfPort>:
	DIO_setPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
}
void SSD_displayNumber(u8 desiredNumber)
{
	writeHalfPort(desiredNumber);
 28e:	cf 93       	push	r28
 290:	c8 2f       	mov	r28, r24
 292:	80 ff       	sbrs	r24, 0
 294:	06 c0       	rjmp	.+12     	; 0x2a2 <writeHalfPort+0x14>
 296:	41 e0       	ldi	r20, 0x01	; 1
 298:	64 e0       	ldi	r22, 0x04	; 4
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 2a0:	05 c0       	rjmp	.+10     	; 0x2ac <writeHalfPort+0x1e>
 2a2:	40 e0       	ldi	r20, 0x00	; 0
 2a4:	64 e0       	ldi	r22, 0x04	; 4
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 2ac:	c1 ff       	sbrs	r28, 1
 2ae:	06 c0       	rjmp	.+12     	; 0x2bc <writeHalfPort+0x2e>
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	65 e0       	ldi	r22, 0x05	; 5
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 2ba:	05 c0       	rjmp	.+10     	; 0x2c6 <writeHalfPort+0x38>
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	65 e0       	ldi	r22, 0x05	; 5
 2c0:	80 e0       	ldi	r24, 0x00	; 0
 2c2:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 2c6:	c2 ff       	sbrs	r28, 2
 2c8:	06 c0       	rjmp	.+12     	; 0x2d6 <writeHalfPort+0x48>
 2ca:	41 e0       	ldi	r20, 0x01	; 1
 2cc:	66 e0       	ldi	r22, 0x06	; 6
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 2d4:	05 c0       	rjmp	.+10     	; 0x2e0 <writeHalfPort+0x52>
 2d6:	40 e0       	ldi	r20, 0x00	; 0
 2d8:	66 e0       	ldi	r22, 0x06	; 6
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 2e0:	c3 ff       	sbrs	r28, 3
 2e2:	06 c0       	rjmp	.+12     	; 0x2f0 <writeHalfPort+0x62>
 2e4:	41 e0       	ldi	r20, 0x01	; 1
 2e6:	67 e0       	ldi	r22, 0x07	; 7
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 2ee:	05 c0       	rjmp	.+10     	; 0x2fa <writeHalfPort+0x6c>
 2f0:	40 e0       	ldi	r20, 0x00	; 0
 2f2:	67 e0       	ldi	r22, 0x07	; 7
 2f4:	80 e0       	ldi	r24, 0x00	; 0
 2f6:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 2fa:	cf 91       	pop	r28
 2fc:	08 95       	ret

000002fe <SSD_on>:
 2fe:	41 e0       	ldi	r20, 0x01	; 1
 300:	64 e0       	ldi	r22, 0x04	; 4
 302:	80 e0       	ldi	r24, 0x00	; 0
 304:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
 308:	41 e0       	ldi	r20, 0x01	; 1
 30a:	65 e0       	ldi	r22, 0x05	; 5
 30c:	80 e0       	ldi	r24, 0x00	; 0
 30e:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
 312:	41 e0       	ldi	r20, 0x01	; 1
 314:	66 e0       	ldi	r22, 0x06	; 6
 316:	80 e0       	ldi	r24, 0x00	; 0
 318:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
 31c:	41 e0       	ldi	r20, 0x01	; 1
 31e:	67 e0       	ldi	r22, 0x07	; 7
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
 326:	41 e0       	ldi	r20, 0x01	; 1
 328:	61 e0       	ldi	r22, 0x01	; 1
 32a:	81 e0       	ldi	r24, 0x01	; 1
 32c:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	62 e0       	ldi	r22, 0x02	; 2
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
 33a:	41 e0       	ldi	r20, 0x01	; 1
 33c:	63 e0       	ldi	r22, 0x03	; 3
 33e:	81 e0       	ldi	r24, 0x01	; 1
 340:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_setPinDirection>
 344:	41 e0       	ldi	r20, 0x01	; 1
 346:	61 e0       	ldi	r22, 0x01	; 1
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 34e:	41 e0       	ldi	r20, 0x01	; 1
 350:	62 e0       	ldi	r22, 0x02	; 2
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 358:	40 e0       	ldi	r20, 0x00	; 0
 35a:	63 e0       	ldi	r22, 0x03	; 3
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
 362:	08 95       	ret

00000364 <SSD_displayFullNumber>:
		DIO_setPinValue(DIO_PORTA,DIO_PIN7,DIO_PIN_LOW);
	}
}

void SSD_displayFullNumber(u8 firstNumber,u8 secondNumber)
{
 364:	cf 93       	push	r28
 366:	df 93       	push	r29
 368:	c8 2f       	mov	r28, r24
 36a:	d6 2f       	mov	r29, r22
	DIO_setPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_HIGH);
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	61 e0       	ldi	r22, 0x01	; 1
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_LOW);
 376:	40 e0       	ldi	r20, 0x00	; 0
 378:	62 e0       	ldi	r22, 0x02	; 2
 37a:	81 e0       	ldi	r24, 0x01	; 1
 37c:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 380:	40 e0       	ldi	r20, 0x00	; 0
 382:	63 e0       	ldi	r22, 0x03	; 3
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	
	writeHalfPort(secondNumber);
 38a:	8d 2f       	mov	r24, r29
 38c:	0e 94 47 01 	call	0x28e	; 0x28e <writeHalfPort>
 390:	8f e5       	ldi	r24, 0x5F	; 95
 392:	9d e6       	ldi	r25, 0x6D	; 109
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <SSD_displayFullNumber+0x30>
 398:	00 c0       	rjmp	.+0      	; 0x39a <SSD_displayFullNumber+0x36>
 39a:	00 00       	nop
	_delay_ms(7);
	
	
	DIO_setPinValue(DIO_PORTB,DIO_PIN1,DIO_PIN_LOW);
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	61 e0       	ldi	r22, 0x01	; 1
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTB,DIO_PIN2,DIO_PIN_HIGH);
 3a6:	41 e0       	ldi	r20, 0x01	; 1
 3a8:	62 e0       	ldi	r22, 0x02	; 2
 3aa:	81 e0       	ldi	r24, 0x01	; 1
 3ac:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	DIO_setPinValue(DIO_PORTB,DIO_PIN3,DIO_PIN_LOW);
 3b0:	40 e0       	ldi	r20, 0x00	; 0
 3b2:	63 e0       	ldi	r22, 0x03	; 3
 3b4:	81 e0       	ldi	r24, 0x01	; 1
 3b6:	0e 94 ac 00 	call	0x158	; 0x158 <DIO_setPinValue>
	
	writeHalfPort(firstNumber);
 3ba:	8c 2f       	mov	r24, r28
 3bc:	0e 94 47 01 	call	0x28e	; 0x28e <writeHalfPort>
 3c0:	8f e5       	ldi	r24, 0x5F	; 95
 3c2:	9d e6       	ldi	r25, 0x6D	; 109
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <SSD_displayFullNumber+0x60>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <SSD_displayFullNumber+0x66>
 3ca:	00 00       	nop
	_delay_ms(7);
 3cc:	df 91       	pop	r29
 3ce:	cf 91       	pop	r28
 3d0:	08 95       	ret

000003d2 <_exit>:
 3d2:	f8 94       	cli

000003d4 <__stop_program>:
 3d4:	ff cf       	rjmp	.-2      	; 0x3d4 <__stop_program>
