
SERVOM_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000031e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000392  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  00000392  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000392  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003c4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000400  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bb9  00000000  00000000  00000520  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000073f  00000000  00000000  000010d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000800  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  00002018  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000570  00000000  00000000  00002284  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006d0  00000000  00000000  000027f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00002ec4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_10>
  2c:	0c 94 e0 00 	jmp	0x1c0	; 0x1c0 <__vector_11>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a8 36       	cpi	r26, 0x68	; 104
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 b4 00 	call	0x168	; 0x168 <main>
  74:	0c 94 8d 01 	jmp	0x31a	; 0x31a <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_setPinDirection>:
/* PINS APIS*/ 

void DIO_setPinDirection(u8 PortId, u8 PinId , u8 PinDirection ) 

{
 if ( (PortId<=3) && (PinId<=7) && ((PinDirection == DIO_PIN_OUTPUT ) || (PinDirection == DIO_PIN_INPUT)) )
  7c:	84 30       	cpi	r24, 0x04	; 4
  7e:	08 f0       	brcs	.+2      	; 0x82 <DIO_setPinDirection+0x6>
  80:	72 c0       	rjmp	.+228    	; 0x166 <DIO_setPinDirection+0xea>
  82:	68 30       	cpi	r22, 0x08	; 8
  84:	08 f0       	brcs	.+2      	; 0x88 <DIO_setPinDirection+0xc>
  86:	6f c0       	rjmp	.+222    	; 0x166 <DIO_setPinDirection+0xea>
  88:	42 30       	cpi	r20, 0x02	; 2
  8a:	08 f0       	brcs	.+2      	; 0x8e <DIO_setPinDirection+0x12>
  8c:	6c c0       	rjmp	.+216    	; 0x166 <DIO_setPinDirection+0xea>
 { 
	switch (PortId)  // DIO PORTA
  8e:	81 30       	cpi	r24, 0x01	; 1
  90:	01 f1       	breq	.+64     	; 0xd2 <DIO_setPinDirection+0x56>
  92:	30 f0       	brcs	.+12     	; 0xa0 <DIO_setPinDirection+0x24>
  94:	82 30       	cpi	r24, 0x02	; 2
  96:	b1 f1       	breq	.+108    	; 0x104 <DIO_setPinDirection+0x88>
  98:	83 30       	cpi	r24, 0x03	; 3
  9a:	09 f4       	brne	.+2      	; 0x9e <DIO_setPinDirection+0x22>
  9c:	4c c0       	rjmp	.+152    	; 0x136 <DIO_setPinDirection+0xba>
  9e:	08 95       	ret
	{
		case 0 : 
		if (DIO_PIN_OUTPUT == PinDirection)
  a0:	41 30       	cpi	r20, 0x01	; 1
  a2:	59 f4       	brne	.+22     	; 0xba <DIO_setPinDirection+0x3e>
		{
			SET_BIT(DDRA,PinId);
  a4:	2a b3       	in	r18, 0x1a	; 26
  a6:	81 e0       	ldi	r24, 0x01	; 1
  a8:	90 e0       	ldi	r25, 0x00	; 0
  aa:	02 c0       	rjmp	.+4      	; 0xb0 <DIO_setPinDirection+0x34>
  ac:	88 0f       	add	r24, r24
  ae:	99 1f       	adc	r25, r25
  b0:	6a 95       	dec	r22
  b2:	e2 f7       	brpl	.-8      	; 0xac <DIO_setPinDirection+0x30>
  b4:	82 2b       	or	r24, r18
  b6:	8a bb       	out	0x1a, r24	; 26
  b8:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRA,PinId);
  ba:	2a b3       	in	r18, 0x1a	; 26
  bc:	81 e0       	ldi	r24, 0x01	; 1
  be:	90 e0       	ldi	r25, 0x00	; 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <DIO_setPinDirection+0x4a>
  c2:	88 0f       	add	r24, r24
  c4:	99 1f       	adc	r25, r25
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <DIO_setPinDirection+0x46>
  ca:	80 95       	com	r24
  cc:	82 23       	and	r24, r18
  ce:	8a bb       	out	0x1a, r24	; 26
  d0:	08 95       	ret
		}
		break ;
		
		case 1 : // DIO PORTB 
		if (DIO_PIN_OUTPUT == PinDirection)
  d2:	41 30       	cpi	r20, 0x01	; 1
  d4:	59 f4       	brne	.+22     	; 0xec <DIO_setPinDirection+0x70>
		{
			SET_BIT(DDRB,PinId);
  d6:	27 b3       	in	r18, 0x17	; 23
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	02 c0       	rjmp	.+4      	; 0xe2 <DIO_setPinDirection+0x66>
  de:	88 0f       	add	r24, r24
  e0:	99 1f       	adc	r25, r25
  e2:	6a 95       	dec	r22
  e4:	e2 f7       	brpl	.-8      	; 0xde <DIO_setPinDirection+0x62>
  e6:	82 2b       	or	r24, r18
  e8:	87 bb       	out	0x17, r24	; 23
  ea:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRB,PinId);
  ec:	27 b3       	in	r18, 0x17	; 23
  ee:	81 e0       	ldi	r24, 0x01	; 1
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <DIO_setPinDirection+0x7c>
  f4:	88 0f       	add	r24, r24
  f6:	99 1f       	adc	r25, r25
  f8:	6a 95       	dec	r22
  fa:	e2 f7       	brpl	.-8      	; 0xf4 <DIO_setPinDirection+0x78>
  fc:	80 95       	com	r24
  fe:	82 23       	and	r24, r18
 100:	87 bb       	out	0x17, r24	; 23
 102:	08 95       	ret
		}
		break ;
		
		case 2 : // DIO PORTC 
		if (DIO_PIN_OUTPUT == PinDirection)
 104:	41 30       	cpi	r20, 0x01	; 1
 106:	59 f4       	brne	.+22     	; 0x11e <DIO_setPinDirection+0xa2>
		{
			SET_BIT(DDRC,PinId);
 108:	24 b3       	in	r18, 0x14	; 20
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	02 c0       	rjmp	.+4      	; 0x114 <DIO_setPinDirection+0x98>
 110:	88 0f       	add	r24, r24
 112:	99 1f       	adc	r25, r25
 114:	6a 95       	dec	r22
 116:	e2 f7       	brpl	.-8      	; 0x110 <DIO_setPinDirection+0x94>
 118:	82 2b       	or	r24, r18
 11a:	84 bb       	out	0x14, r24	; 20
 11c:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRC,PinId);
 11e:	24 b3       	in	r18, 0x14	; 20
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_setPinDirection+0xae>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_setPinDirection+0xaa>
 12e:	80 95       	com	r24
 130:	82 23       	and	r24, r18
 132:	84 bb       	out	0x14, r24	; 20
 134:	08 95       	ret
		}
		break ;
		
		case 3 : // DIO PORTD 
		if (DIO_PIN_OUTPUT == PinDirection)
 136:	41 30       	cpi	r20, 0x01	; 1
 138:	59 f4       	brne	.+22     	; 0x150 <DIO_setPinDirection+0xd4>
		{
			SET_BIT(DDRD,PinId);
 13a:	21 b3       	in	r18, 0x11	; 17
 13c:	81 e0       	ldi	r24, 0x01	; 1
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	02 c0       	rjmp	.+4      	; 0x146 <DIO_setPinDirection+0xca>
 142:	88 0f       	add	r24, r24
 144:	99 1f       	adc	r25, r25
 146:	6a 95       	dec	r22
 148:	e2 f7       	brpl	.-8      	; 0x142 <DIO_setPinDirection+0xc6>
 14a:	82 2b       	or	r24, r18
 14c:	81 bb       	out	0x11, r24	; 17
 14e:	08 95       	ret
		}
		else 
		{
			CLR_BIT(DDRD,PinId);
 150:	21 b3       	in	r18, 0x11	; 17
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	90 e0       	ldi	r25, 0x00	; 0
 156:	02 c0       	rjmp	.+4      	; 0x15c <DIO_setPinDirection+0xe0>
 158:	88 0f       	add	r24, r24
 15a:	99 1f       	adc	r25, r25
 15c:	6a 95       	dec	r22
 15e:	e2 f7       	brpl	.-8      	; 0x158 <DIO_setPinDirection+0xdc>
 160:	80 95       	com	r24
 162:	82 23       	and	r24, r18
 164:	81 bb       	out	0x11, r24	; 17
 166:	08 95       	ret

00000168 <main>:
#include   "DIO_interface.h"


int main(void)
{
	DIO_setPinDirection(DIO_PORTD,DIO_PIN5,DIO_PIN_OUTPUT);
 168:	41 e0       	ldi	r20, 0x01	; 1
 16a:	65 e0       	ldi	r22, 0x05	; 5
 16c:	83 e0       	ldi	r24, 0x03	; 3
 16e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_setPinDirection>
    
	SERVOM_on(90);
 172:	8a e5       	ldi	r24, 0x5A	; 90
 174:	0e 94 bd 00 	call	0x17a	; 0x17a <SERVOM_on>
 178:	ff cf       	rjmp	.-2      	; 0x178 <main+0x10>

0000017a <SERVOM_on>:
#include   "TMR_interface.h"
#include   "TMR_config.h"


void SERVOM_on(s8 Degree)
{
 17a:	cf 93       	push	r28
 17c:	df 93       	push	r29
	if ((Degree >= -90) || (Degree <= 90) )
	{
	u16 OCR1A_passValue ;
	
	OCR1A_passValue = (((u16)Degree+90)*(250)/(180)) + 249 ;
 17e:	28 2f       	mov	r18, r24
 180:	3a ef       	ldi	r19, 0xFA	; 250
 182:	23 03       	mulsu	r18, r19
 184:	c0 01       	movw	r24, r0
 186:	11 24       	eor	r1, r1
 188:	9c 01       	movw	r18, r24
 18a:	2c 51       	subi	r18, 0x1C	; 28
 18c:	38 4a       	sbci	r19, 0xA8	; 168
 18e:	a3 e8       	ldi	r26, 0x83	; 131
 190:	bd e2       	ldi	r27, 0x2D	; 45
 192:	0e 94 7e 01 	call	0x2fc	; 0x2fc <__umulhisi3>
 196:	96 95       	lsr	r25
 198:	87 95       	ror	r24
 19a:	92 95       	swap	r25
 19c:	82 95       	swap	r24
 19e:	8f 70       	andi	r24, 0x0F	; 15
 1a0:	89 27       	eor	r24, r25
 1a2:	9f 70       	andi	r25, 0x0F	; 15
 1a4:	89 27       	eor	r24, r25
 1a6:	ec 01       	movw	r28, r24
 1a8:	c7 50       	subi	r28, 0x07	; 7
 1aa:	df 4f       	sbci	r29, 0xFF	; 255
	
	TMR_timer1Init();
 1ac:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <TMR_timer1Init>
	TMR_timer1setCompareAMatchValue(OCR1A_passValue);
 1b0:	ce 01       	movw	r24, r28
 1b2:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <TMR_timer1setCompareAMatchValue>
	TMR_timer1Start();
 1b6:	0e 94 71 01 	call	0x2e2	; 0x2e2 <TMR_timer1Start>
	}
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	08 95       	ret

000001c0 <__vector_11>:

void TMR_timer0_CTC_SetCallBack(void(*ptr)(void))
{
	if (ptr != NULL)
	{
		TMR_timer0_CTC_pCallBack= ptr ;
 1c0:	1f 92       	push	r1
 1c2:	0f 92       	push	r0
 1c4:	0f b6       	in	r0, 0x3f	; 63
 1c6:	0f 92       	push	r0
 1c8:	11 24       	eor	r1, r1
 1ca:	2f 93       	push	r18
 1cc:	3f 93       	push	r19
 1ce:	4f 93       	push	r20
 1d0:	5f 93       	push	r21
 1d2:	6f 93       	push	r22
 1d4:	7f 93       	push	r23
 1d6:	8f 93       	push	r24
 1d8:	9f 93       	push	r25
 1da:	af 93       	push	r26
 1dc:	bf 93       	push	r27
 1de:	ef 93       	push	r30
 1e0:	ff 93       	push	r31
 1e2:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counterOVF.1652>
 1e6:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <counterOVF.1652+0x1>
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <counterOVF.1652+0x1>
 1f0:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <counterOVF.1652>
 1f4:	86 e0       	ldi	r24, 0x06	; 6
 1f6:	82 bf       	out	0x32, r24	; 50
 1f8:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <counterOVF.1652>
 1fc:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <counterOVF.1652+0x1>
 200:	88 3e       	cpi	r24, 0xE8	; 232
 202:	93 40       	sbci	r25, 0x03	; 3
 204:	69 f4       	brne	.+26     	; 0x220 <__vector_11+0x60>
 206:	86 e0       	ldi	r24, 0x06	; 6
 208:	82 bf       	out	0x32, r24	; 50
 20a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <counterOVF.1652+0x1>
 20e:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <counterOVF.1652>
 212:	e0 91 66 00 	lds	r30, 0x0066	; 0x800066 <TMR_timer0_OVF_pCallBack>
 216:	f0 91 67 00 	lds	r31, 0x0067	; 0x800067 <TMR_timer0_OVF_pCallBack+0x1>
 21a:	30 97       	sbiw	r30, 0x00	; 0
 21c:	09 f0       	breq	.+2      	; 0x220 <__vector_11+0x60>
 21e:	09 95       	icall
 220:	ff 91       	pop	r31
 222:	ef 91       	pop	r30
 224:	bf 91       	pop	r27
 226:	af 91       	pop	r26
 228:	9f 91       	pop	r25
 22a:	8f 91       	pop	r24
 22c:	7f 91       	pop	r23
 22e:	6f 91       	pop	r22
 230:	5f 91       	pop	r21
 232:	4f 91       	pop	r20
 234:	3f 91       	pop	r19
 236:	2f 91       	pop	r18
 238:	0f 90       	pop	r0
 23a:	0f be       	out	0x3f, r0	; 63
 23c:	0f 90       	pop	r0
 23e:	1f 90       	pop	r1
 240:	18 95       	reti

00000242 <__vector_10>:
}

// ISR function prototype for TMR0 CTC
void __vector_10(void) __attribute__ ((signal));
void __vector_10(void)
{
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	11 24       	eor	r1, r1
 24c:	2f 93       	push	r18
 24e:	3f 93       	push	r19
 250:	4f 93       	push	r20
 252:	5f 93       	push	r21
 254:	6f 93       	push	r22
 256:	7f 93       	push	r23
 258:	8f 93       	push	r24
 25a:	9f 93       	push	r25
 25c:	af 93       	push	r26
 25e:	bf 93       	push	r27
 260:	ef 93       	push	r30
 262:	ff 93       	push	r31
	static u16 counterCTC = 0 ;
	counterCTC ++ ;
 264:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 268:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 26c:	01 96       	adiw	r24, 0x01	; 1
 26e:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 272:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	if ( TMR_TMR0_CTC_COUNTER == counterCTC )
 276:	88 3e       	cpi	r24, 0xE8	; 232
 278:	93 40       	sbci	r25, 0x03	; 3
 27a:	59 f4       	brne	.+22     	; 0x292 <__vector_10+0x50>
	{
		// Clear Counter 
		counterCTC = 0 ;
 27c:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 280:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		// Call Action               
		if (TMR_timer0_CTC_pCallBack != NULL)
 284:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <TMR_timer0_CTC_pCallBack>
 288:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <TMR_timer0_CTC_pCallBack+0x1>
 28c:	30 97       	sbiw	r30, 0x00	; 0
 28e:	09 f0       	breq	.+2      	; 0x292 <__vector_10+0x50>
		{
			TMR_timer0_CTC_pCallBack();
 290:	09 95       	icall
		}
	}
}
 292:	ff 91       	pop	r31
 294:	ef 91       	pop	r30
 296:	bf 91       	pop	r27
 298:	af 91       	pop	r26
 29a:	9f 91       	pop	r25
 29c:	8f 91       	pop	r24
 29e:	7f 91       	pop	r23
 2a0:	6f 91       	pop	r22
 2a2:	5f 91       	pop	r21
 2a4:	4f 91       	pop	r20
 2a6:	3f 91       	pop	r19
 2a8:	2f 91       	pop	r18
 2aa:	0f 90       	pop	r0
 2ac:	0f be       	out	0x3f, r0	; 63
 2ae:	0f 90       	pop	r0
 2b0:	1f 90       	pop	r1
 2b2:	18 95       	reti

000002b4 <TMR_timer1Init>:
/* TIMER1 */

void TMR_timer1Init(void)
{
	// Select Mode = Fast PMW Mode (14)
	CLR_BIT(TCCR1A,0);
 2b4:	8f b5       	in	r24, 0x2f	; 47
 2b6:	8e 7f       	andi	r24, 0xFE	; 254
 2b8:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,1);
 2ba:	8f b5       	in	r24, 0x2f	; 47
 2bc:	82 60       	ori	r24, 0x02	; 2
 2be:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1B,3);
 2c0:	8e b5       	in	r24, 0x2e	; 46
 2c2:	88 60       	ori	r24, 0x08	; 8
 2c4:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,4);
 2c6:	8e b5       	in	r24, 0x2e	; 46
 2c8:	80 61       	ori	r24, 0x10	; 16
 2ca:	8e bd       	out	0x2e, r24	; 46
	
	// Select Non Inverting Mode
	CLR_BIT(TCCR1A,6); 
 2cc:	8f b5       	in	r24, 0x2f	; 47
 2ce:	8f 7b       	andi	r24, 0xBF	; 191
 2d0:	8f bd       	out	0x2f, r24	; 47
	SET_BIT(TCCR1A,7);
 2d2:	8f b5       	in	r24, 0x2f	; 47
 2d4:	80 68       	ori	r24, 0x80	; 128
 2d6:	8f bd       	out	0x2f, r24	; 47
	
	// ICR1 >> Period Time = 20ms (50hz)
	ICR1_u16 = TMR_TMR1_OVERFLOW_VALUE ; 
 2d8:	87 e8       	ldi	r24, 0x87	; 135
 2da:	93 e1       	ldi	r25, 0x13	; 19
 2dc:	97 bd       	out	0x27, r25	; 39
 2de:	86 bd       	out	0x26, r24	; 38
 2e0:	08 95       	ret

000002e2 <TMR_timer1Start>:
	
}
void TMR_timer1Start(void)
{
	// Set Prescaler = 64 
	SET_BIT(TCCR1B,0);
 2e2:	8e b5       	in	r24, 0x2e	; 46
 2e4:	81 60       	ori	r24, 0x01	; 1
 2e6:	8e bd       	out	0x2e, r24	; 46
	SET_BIT(TCCR1B,1);
 2e8:	8e b5       	in	r24, 0x2e	; 46
 2ea:	82 60       	ori	r24, 0x02	; 2
 2ec:	8e bd       	out	0x2e, r24	; 46
	CLR_BIT(TCCR1B,2);
 2ee:	8e b5       	in	r24, 0x2e	; 46
 2f0:	8b 7f       	andi	r24, 0xFB	; 251
 2f2:	8e bd       	out	0x2e, r24	; 46
 2f4:	08 95       	ret

000002f6 <TMR_timer1setCompareAMatchValue>:
}

void TMR_timer1setCompareAMatchValue(u16 OCR1A_value)
{
	//Init  Timer With Compare Value
	OCR1A_u16 = OCR1A_value ;
 2f6:	9b bd       	out	0x2b, r25	; 43
 2f8:	8a bd       	out	0x2a, r24	; 42
 2fa:	08 95       	ret

000002fc <__umulhisi3>:
 2fc:	a2 9f       	mul	r26, r18
 2fe:	b0 01       	movw	r22, r0
 300:	b3 9f       	mul	r27, r19
 302:	c0 01       	movw	r24, r0
 304:	a3 9f       	mul	r26, r19
 306:	70 0d       	add	r23, r0
 308:	81 1d       	adc	r24, r1
 30a:	11 24       	eor	r1, r1
 30c:	91 1d       	adc	r25, r1
 30e:	b2 9f       	mul	r27, r18
 310:	70 0d       	add	r23, r0
 312:	81 1d       	adc	r24, r1
 314:	11 24       	eor	r1, r1
 316:	91 1d       	adc	r25, r1
 318:	08 95       	ret

0000031a <_exit>:
 31a:	f8 94       	cli

0000031c <__stop_program>:
 31c:	ff cf       	rjmp	.-2      	; 0x31c <__stop_program>
